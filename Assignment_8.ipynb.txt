{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "Lgz51aEWRqXp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Function\n",
        "\n",
        "Q1.What is statistics, and why is it important?\n",
        "\n",
        "Ans Statistics is the branch of mathematics that deals with collecting, analyzing, interpreting, presenting, and organizing data. It helps us make sense of complex data by summarizing it and finding patterns, trends, and relationships.\n",
        "\n",
        "Why is Statistics Important?\n",
        "\n",
        "1. Informed Decision-Making\n",
        "Statistics helps individuals and organizations make data-driven decisions. For example, businesses use it to understand customer behavior, and governments use it for policy-making.\n",
        "\n",
        "2. Understanding Data\n",
        "It simplifies large sets of data into meaningful summaries using measures like mean, median, and standard deviation.\n",
        "\n",
        "3. Predicting Future Trends\n",
        "Statistical models (like regression or time series) can forecast future events, such as sales trends, weather, or stock prices.\n",
        "\n",
        "4. Quality Control\n",
        "In industries, statistics is used to monitor and improve product quality and reduce waste.\n",
        "\n",
        "5. Scientific Research\n",
        "In fields like medicine, psychology, and social sciences, statistics helps researchers test hypotheses and validate findings using statistical significance.\n",
        "\n",
        "Q2.What are the two main types of statistics?\n",
        "\n",
        "Ans The two main types of statistics are:\n",
        "\n",
        "1. Descriptive Statistics\n",
        "\n",
        "Descriptive statistics summarize and describe the main features of a dataset.\n",
        "Key Features:\n",
        "\n",
        "Organizes and simplifies data\n",
        "\n",
        "No predictions or conclusions beyond the data\n",
        "\n",
        "Examples:\n",
        "\n",
        "Mean (average)\n",
        "\n",
        "Median and Mode\n",
        "\n",
        "Standard Deviation\n",
        "\n",
        "Tables, Charts, and Graphs (like bar charts, pie charts, histograms)\n",
        "\n",
        "\n",
        "2. Inferential Statistics\n",
        "\n",
        "Inferential statistics allow you to make predictions or generalizations about a larger population based on a sample.\n",
        "\n",
        "Key Features:\n",
        "\n",
        "Uses probability theory\n",
        "\n",
        "Draws conclusions beyond the immediate data\n",
        "\n",
        "Often includes hypothesis testing\n",
        "\n",
        "Examples:\n",
        "\n",
        "Confidence Intervals\n",
        "\n",
        "Hypothesis Testing (t-test, chi-square test, ANOVA)\n",
        "\n",
        "Regression Analysis\n",
        "\n",
        "Q3.What are descriptive statistics?\n",
        "\n",
        "Ans Descriptive statistics are methods used to summarize, organize, and present data in a clear and simple way. They describe the basic features of a dataset without making any predictions or generalizations.\n",
        "\n",
        "Q4.What is inferential statistics?\n",
        "Ans Inferential statistics involves using data from a sample to make predictions, conclusions, or decisions about a larger population. It helps us go beyond just describing data—it allows us to infer or estimate what is likely true for a whole group, based on part of it.\n",
        "\n",
        "Key Purposes of Inferential Statistics:\n",
        "\n",
        "1. Make predictions or generalizations about a population\n",
        "\n",
        "\n",
        "2. Test hypotheses and draw conclusions\n",
        "\n",
        "\n",
        "3. Estimate population parameters (like population mean or proportion)\n",
        "\n",
        "Q5.What is sampling in statistics?\n",
        "\n",
        "Ans Sampling is the process of selecting a subset (sample) from a larger group (population) to study and draw conclusions about the entire group.\n",
        "\n",
        "Instead of collecting data from every member of the population (which is often expensive or impossible), we collect data from a smaller representative group.\n",
        "\n",
        "Q6.What are the different types of sampling methods?\n",
        "\n",
        "Ans Sampling methods are the techniques used to select a subset (sample) from a larger population. These are mainly divided into two broad categories:\n",
        "\n",
        " A. Probability Sampling\n",
        "\n",
        "Every member of the population has a known, non-zero chance of being selected.\n",
        "\n",
        "1. Simple Random Sampling\n",
        "\n",
        "Every individual has an equal chance of selection.\n",
        "\n",
        "Uses random tools (like lottery, random number generator).\n",
        "\n",
        "Advantage: Unbiased and representative\n",
        "\n",
        "Example: Randomly selecting 50 students from a list of 500\n",
        "\n",
        "2. Stratified Sampling\n",
        "\n",
        "Population is divided into strata (groups) based on a shared characteristic (like age, gender, etc.), and a random sample is taken from each group.\n",
        "\n",
        "Advantage: Ensures representation from each subgroup\n",
        "\n",
        "Example: Dividing employees by department, then sampling from each\n",
        "\n",
        "3. Systematic Sampling\n",
        "\n",
        "Selects every k-th member from a list after a random starting point.\n",
        "\n",
        "Advantage: Simple and quick\n",
        "\n",
        "Risk: Can be biased if there's a hidden pattern\n",
        "\n",
        "Example: Choosing every 10th visitor to a website\n",
        "\n",
        "4. Cluster Sampling\n",
        "\n",
        "Population is divided into clusters (usually geographic or natural groups), then some clusters are selected randomly, and all members of selected clusters are studied.\n",
        "\n",
        "Advantage: Cost-effective for large populations\n",
        "\n",
        "Example: Selecting 3 schools out of 20 and surveying all students in those schools\n",
        "\n",
        " B. Non-Probability Sampling\n",
        "\n",
        "Not every member has a known or equal chance of being selected.\n",
        "\n",
        "1. Convenience Sampling\n",
        "\n",
        "Choosing people who are easiest to reach.\n",
        "\n",
        " Disadvantage: High bias risk\n",
        "\n",
        "Example: Surveying people in a nearby cafe\n",
        "\n",
        "2. Judgmental (Purposive) Sampling\n",
        "\n",
        "Researcher selects individuals based on expertise or purpose.\n",
        "\n",
        "Example: Interviewing only senior doctors about a medical policy\n",
        "\n",
        "3. Quota Sampling\n",
        "\n",
        "Similar to stratified sampling, but individuals are not selected randomly—they are chosen until a quota is met.\n",
        "\n",
        "Example: Interviewing 30 men and 30 women, without random selection\n",
        "\n",
        "4. Snowball Sampling\n",
        "\n",
        "Used when subjects are hard to find; existing subjects recruit others.\n",
        "\n",
        "Example: Finding participants in a secretive group (like drug users)\n",
        "\n",
        "\n",
        "Q7.What is the difference between random and non-random sampling?\n",
        "\n",
        "Ans Sampling is used to study a population by selecting a smaller group (sample). The main difference lies in how the sample is selected.\n",
        "\n",
        "1.Random Sampling (Probability Sampling)\n",
        "\n",
        "In random sampling, every member of the population has a known and equal chance of being selected.\n",
        "\n",
        "Key Features:\n",
        "\n",
        "Unbiased selection\n",
        "\n",
        "Uses chance or random methods (e.g., lottery, random number generator)\n",
        "\n",
        "Results are more statistically reliable\n",
        "\n",
        " Examples:\n",
        "\n",
        "Simple Random Sampling: Picking names from a hat\n",
        "\n",
        "Stratified Sampling: Randomly selecting from each subgroup\n",
        "\n",
        "Systematic Sampling: Every 10th person from a list\n",
        "\n",
        "Advantages:\n",
        "\n",
        "More representative of the population\n",
        "\n",
        "Allows use of inferential statistics\n",
        "\n",
        "Reduces sampling bias\n",
        "\n",
        "2. Non-Random Sampling (Non-Probability Sampling)\n",
        "\n",
        "In non-random sampling, not all members have a known or equal chance of selection. Selection is often based on judgment, convenience, or purpose.\n",
        "\n",
        "Key Features:\n",
        "\n",
        "May be biased\n",
        "\n",
        "Easier and quicker\n",
        "\n",
        "Less generalizable to the population\n",
        "\n",
        "Examples:\n",
        "\n",
        "Convenience Sampling: Asking people near you\n",
        "\n",
        "Judgmental Sampling: Choosing based on expertise\n",
        "\n",
        "Quota Sampling: Taking a set number from each category without randomness\n",
        "\n",
        "Disadvantages:\n",
        "\n",
        "Greater risk of bias\n",
        "\n",
        "May not represent the whole population accurately\n",
        "\n",
        "Limited validity for inference\n",
        "\n",
        "Q8.Define and give examples of qualitative and quantitative data?\n",
        "\n",
        "Ans In statistics, data is classified into two main types: Qualitative and Quantitative. These types determine how we collect, analyze, and interpret data.\n",
        "\n",
        "1. Qualitative Data (Also called Categorical Data)\n",
        "\n",
        "Definition:\n",
        "Qualitative data describes qualities, characteristics, or categories. It cannot be measured with numbers, but it can be observed, labeled, or grouped.\n",
        "\n",
        "Examples:\n",
        "\n",
        "Data Type   Example Values\n",
        "\n",
        "Colors  Red, Blue, Green\n",
        "Gender  Male, Female, Other\n",
        "Marital Status  Single, Married, Divorced\n",
        "Blood Group A, B, AB, O\n",
        "Nationality Indian, American, Canadian\n",
        "\n",
        "Types of Qualitative Data:\n",
        "\n",
        "Nominal – No natural order (e.g., religion, eye color)\n",
        "\n",
        "Ordinal – Ordered categories (e.g., satisfaction: Low, Medium, High)\n",
        "\n",
        "\n",
        "2. Quantitative Data (Also called Numerical Data)\n",
        "\n",
        "Definition:\n",
        "Quantitative data is measurable and numeric. It represents quantities and can be counted or measured.\n",
        "\n",
        "Examples:\n",
        "\n",
        "Data Type   Example Values\n",
        "\n",
        "Age 18, 25, 60\n",
        "Height  160 cm, 175.5 cm\n",
        "Temperature 37.5°C, 98.6°F\n",
        "Income  ₹50,000, ₹1,00,000\n",
        "Test Scores 78, 85, 92\n",
        "\n",
        "Types of Quantitative Data:\n",
        "\n",
        "Discrete – Whole numbers, counted (e.g., number of students: 30)\n",
        "\n",
        "Continuous – Can take any value within a range (e.g., height: 165.3 cm)\n",
        "\n",
        "Q9.What are the different types of data in statistics?\n",
        "\n",
        "Ans In statistics, data is broadly classified based on nature and level of measurement. Understanding the different types of data helps determine which statistical methods and visualizations to use.\n",
        "\n",
        "A. Based on Nature:\n",
        "\n",
        "1. Qualitative Data (Categorical Data)\n",
        "\n",
        "Describes qualities or categories; not measured numerically.\n",
        "\n",
        "Examples:\n",
        "\n",
        "Gender: Male, Female\n",
        "\n",
        "Blood Type: A, B, AB, O\n",
        "\n",
        "Satisfaction Level: High, Medium, Low\n",
        "\n",
        "Types of Qualitative Data:\n",
        "\n",
        "Nominal: No order\n",
        "\n",
        "Example: Eye color (Brown, Blue, Green)\n",
        "\n",
        "Ordinal: Ordered categories\n",
        "\n",
        "Example: Education level (High School < Bachelor < Master)\n",
        "\n",
        "2. Quantitative Data (Numerical Data)\n",
        "\n",
        "Deals with numbers and measurements.\n",
        "\n",
        "Examples:\n",
        "\n",
        "Age: 18, 25, 60\n",
        "\n",
        "Salary: ₹30,000, ₹50,000\n",
        "\n",
        "Marks: 45, 78, 92\n",
        "\n",
        "Types of Quantitative Data:\n",
        "\n",
        "Discrete: Countable, whole numbers\n",
        "\n",
        "Example: Number of children (0, 1, 2,\n",
        "\n",
        "Continuous: Measurable, can take any value within a range\n",
        "\n",
        "Example: Height (170.5 cm), Temperature (98.6°F)\n",
        "\n",
        "B. Based on Level of Measurement:\n",
        "\n",
        "1. Nominal\n",
        "\n",
        "Categorical with no order\n",
        "\n",
        "Example: Religion (Hindu, Muslim, Christian)\n",
        "\n",
        "2. Ordinal\n",
        "\n",
        "Categorical with natural order, but differences are not measurable\n",
        "\n",
        "Example: Rating (Poor, Fair, Good, Excellent)\n",
        "\n",
        "3. Interval\n",
        "\n",
        "Numeric, ordered, equal intervals, but no true zero\n",
        "\n",
        "Example: Temperature in °C or °F\n",
        "\n",
        "4. Ratio\n",
        "\n",
        "Numeric, ordered, true zero exists, allows comparison like \"twice as much\"\n",
        "\n",
        "🔹 Example: Age, Weight, Income\n",
        "\n",
        "Q10.Explain nominal, ordinal, interval, and ratio levels of measurement?\n",
        "\n",
        "Ans Levels of Measurement in Statistics\n",
        "\n",
        "In statistics, data can be measured at four different levels, each giving different kinds of information and determining what analysis is appropriate:\n",
        "\n",
        "1. Nominal Level – (Name only)\n",
        "\n",
        "Definition:\n",
        "Nominal data consists of categories or labels with no inherent order.\n",
        "\n",
        "Cannot be ranked or compared numerically\n",
        "\n",
        "Used for classification only\n",
        "\n",
        "Examples:\n",
        "\n",
        "Gender: Male, Female, Other\n",
        "\n",
        "Blood Type: A, B, AB, O\n",
        "\n",
        "Nationality: Indian, American, Chinese\n",
        "\n",
        "Religion: Hindu, Muslim, Christian\n",
        "\n",
        "Think: \"Labels only\"\n",
        "\n",
        "2. Ordinal Level – (Order matters, but not precise differences)\n",
        "\n",
        "Definition:\n",
        "Ordinal data is categorical data that has a meaningful order, but the differences between values are not measurable or equal.\n",
        "\n",
        "You can rank, but not measure exact gaps between ranks\n",
        "\n",
        "Examples:\n",
        "\n",
        "Satisfaction: Very Satisfied > Satisfied > Neutral > Dissatisfied\n",
        "\n",
        "Education Level: High School < Bachelor < Master < PhD\n",
        "\n",
        "Star Ratings: ⭐,⭐⭐,⭐⭐⭐\n",
        "\n",
        "Think: \"Ordered categories\"\n",
        "\n",
        "3. Interval Level – (Ordered + Equal intervals, no true zero)\n",
        "\n",
        "Definition:\n",
        "Interval data is numerical, has equal spacing between values, but no true zero point (zero doesn’t mean absence).\n",
        "\n",
        "You can add and subtract, but ratios are meaningless\n",
        "\n",
        "Examples:\n",
        "\n",
        "Temperature in °C or °F (0°C ≠ no temperature)\n",
        "\n",
        "Time of day: 12 PM, 3 PM, etc.\n",
        "\n",
        "Dates: Year 2000, 2010, 2020\n",
        "\n",
        "Think: \"Numbers with equal spacing, but no true zero\"\n",
        "\n",
        "4. Ratio Level – (Interval + True zero = Full math operations)\n",
        "\n",
        "Definition:\n",
        "Ratio data has all the properties of interval data, and a true zero point (zero means none).\n",
        "\n",
        "You can perform all mathematical operations, including ratios (\"twice as much\")\n",
        "\n",
        "Examples:\n",
        "\n",
        "Height: 180 cm, 0 cm means no height\n",
        "\n",
        "Weight: 70 kg\n",
        "\n",
        "Income: ₹0, ₹50,000\n",
        "\n",
        "Age: 0 years, 25 years\n",
        "\n",
        "Think: \"Interval data with a true zero – most powerful type\"\n",
        "\n",
        "Q11.What is the measure of central tendency?\n",
        "\n",
        "Ans A measure of central tendency is a statistical value that describes the center or average of a dataset. It gives a single value that represents an entire distribution, helping you understand where most values in the data lie.\n",
        "\n",
        "The 3 Main Measures of Central Tendency:\n",
        "\n",
        "1. Mean (Average)\n",
        "\n",
        "Definition: The sum of all values divided by the number of values.\n",
        "\n",
        "Formula:\n",
        "\n",
        "\\text{Mean} = \\frac{\\text{Sum of all values}}{\\text{Number of values}}\n",
        "\n",
        "Example:\n",
        "If the scores are 70, 80, 90:\n",
        "\n",
        "\\text{Mean} = \\frac{70 + 80 + 90}{3} = 80\n",
        "\n",
        "Best Used When:\n",
        "\n",
        "Data is numeric\n",
        "\n",
        "There are no extreme outliers\n",
        "\n",
        "2. Median (Middle Value)\n",
        "\n",
        "Definition: The middle value when the data is arranged in order.\n",
        "\n",
        "Steps:\n",
        "\n",
        "Arrange data in ascending order\n",
        "\n",
        "If odd number of values → middle one\n",
        "\n",
        "If even → average of two middle values\n",
        "\n",
        "Example:\n",
        "Scores: 50, 60, 70 → Median = 60\n",
        "Scores: 50, 60, 70, 80 → Median = (60 + 70)/2 = 65\n",
        "\n",
        " Best Used When:\n",
        "\n",
        "Data has outliers or skewed distribution\n",
        "\n",
        "3. Mode (Most Frequent Value)\n",
        "\n",
        "Definition: The value that appears most often in the dataset.\n",
        "\n",
        "Example:\n",
        "Scores: 40, 50, 50, 60 → Mode = 50\n",
        "Scores: 1, 2, 3 → No mode (all occur once)\n",
        "\n",
        "Best Used When:\n",
        "\n",
        "Data is categorical or nominal\n",
        "\n",
        "Want to find the most common value\n",
        "\n",
        "Q12.Define mean, median, and mode?\n",
        "\n",
        "Ans Mean, Median, and Mode are measures of central tendency in statistics. They help summarize a large set of data by identifying the center point or typical value.\n",
        "\n",
        "1. Mean (Average)\n",
        "\n",
        "The mean is the sum of all values divided by the number of values.\n",
        "\n",
        "Formula:\n",
        "\n",
        "\\text{Mean} = \\frac{\\text{Sum of all values}}{\\text{Number of values}}\n",
        "\n",
        "Example:\n",
        "For the data set: 5, 7, 9,\n",
        "\n",
        "\\text{Mean} = \\frac{5 + 7 + 9}{3} = \\frac{21}{3} = 7\n",
        "\n",
        "2. Median\n",
        "\n",
        "The median is the middle value in an ordered data set.\n",
        "\n",
        "If the number of values is odd, it's the middle one.\n",
        "\n",
        "If even, it's the average of the two middle values.\n",
        "\n",
        "Example 1 (odd number of values):\n",
        "Data: 3, 5, 7 → Median = 5\n",
        "\n",
        "Example 2 (even number of values):\n",
        "Data: 2, 4, 6, 8 → Median = (4 + 6)/2 = 5\n",
        "\n",
        "3. Mode\n",
        "\n",
        "The mode is the value that appears most frequently in a data set.\n",
        "\n",
        "A data set can have no mode, one mode (unimodal), two modes (bimodal), or more.\n",
        "\n",
        "Example:\n",
        "Data: 2, 4, 4, 6, 7 → Mode = 4 (since it appears twice)\n",
        "\n",
        "Q13.What is the significance of the measure of central tendency?\n",
        "\n",
        "Ans The measures of central tendency are statistical tools used to identify the central point or typical value in a dataset. They help summarize a large set of data with a single representative value. The three main measures are:\n",
        "\n",
        "1. Mean (Average)\n",
        "\n",
        "2. Median\n",
        "\n",
        "3. Mode\n",
        "\n",
        "Significance of Measures of Central Tendency\n",
        "\n",
        "1. Simplifies Complex Data\n",
        "\n",
        "Reduces a large dataset to a single value that represents the whole.\n",
        "\n",
        "Helps in understanding the overall trend or behavior of the data.\n",
        "\n",
        "2. Comparison Between Groups\n",
        "\n",
        "Useful for comparing different datasets or groups (e.g., average income in two cities).\n",
        "\n",
        "3. Basis for Further Statistical Analysis\n",
        "\n",
        "Many statistical methods (like standard deviation, regression) rely on the mean or median as a starting point.\n",
        "\n",
        "4. Decision-Making Tool\n",
        "\n",
        "Businesses, governments, and researchers use them to make informed decisions (e.g., average customer rating, average salary, typical test score).\n",
        "\n",
        "5. Identifying Distribution Shape\n",
        "\n",
        "If the mean = median = mode, the data is symmetrical.\n",
        "\n",
        "Differences between them can indicate skewness (positive or negative).\n",
        "\n",
        "When to Use Which Measure\n",
        "\n",
        "Measure Use When    Example\n",
        "\n",
        "Mean    Data is numerical and symmetrically distributed Average marks of students\n",
        "Median  Data is skewed or contains outliers Median income of a population\n",
        "Mode    Finding the most frequent item  Most common shoe size sold\n",
        "\n",
        "Q14.What is variance, and how is it calculated?\n",
        "\n",
        "Ans Variance is a measure of how much the values in a dataset differ from the mean (average). It tells you the spread or dispersion of data — in other words, how far each data point is from the average value.\n",
        "\n",
        "If the variance is low, the data points are close to the mean (less spread out).\n",
        "\n",
        "If the variance is high, the data points are more spread out from the mean.\n",
        "\n",
        "How is Variance Calculated?\n",
        "\n",
        "There are two types:\n",
        "\n",
        "Population Variance (used when you have data for the entire population)\n",
        "\n",
        "Sample Variance (used when you have a sample from a population)\n",
        "\n",
        "1. Population Variance Formula\n",
        "\n",
        "\\sigma^2 = \\frac{1}{N} \\sum_{i=1}^{N}(x_i - \\mu)^2\n",
        "\n",
        "Where:\n",
        "\n",
        " = population variance\n",
        "\n",
        " = total number of data points\n",
        "\n",
        " = each individual data value\n",
        "\n",
        " = population mean\n",
        "\n",
        "2. Sample Variance Formula\n",
        "\n",
        "s^2 = \\frac{1}{n - 1} \\sum_{i=1}^{n}(x_i - \\bar{x})^2\n",
        "\n",
        "Where:\n",
        "\n",
        " = sample variance\n",
        "\n",
        " = number of sample data points\n",
        "\n",
        " = sample mean\n",
        "\n",
        "Q15.What is standard deviation, and why is it important?\n",
        "\n",
        "Ans Standard deviation is a measure of the amount of variation or dispersion in a set of data values. It tells us how much the data deviates from the mean (average).\n",
        "\n",
        "Definition and Formula:\n",
        "\n",
        "For a set of values:\n",
        "\n",
        "The standard deviation (σ for population, s for sample) is calculated as:\n",
        "\n",
        "\\sigma = \\sqrt{\\frac{1}{n} \\sum_{i=1}^{n} (x_i - \\mu)^2}\n",
        "\n",
        "Where:\n",
        "\n",
        " = mean of the data\n",
        "\n",
        " = each value\n",
        "\n",
        " = total number of values\n",
        "\n",
        "For a sample (not entire population), divide by  instead of .\n",
        "\n",
        "Why is Standard Deviation Important?\n",
        "\n",
        "1. Measures Consistency:\n",
        "It shows how consistent the data is. A low standard deviation means data points are close to the mean (less spread), while a high standard deviation indicates data is more spread out.\n",
        "\n",
        "2. Risk Assessment:\n",
        "In finance, it’s used to measure the risk or volatility of an investment. A higher standard deviation = higher risk.\n",
        "\n",
        "3. Comparing Data Sets:\n",
        "Helps compare the spread of two or more datasets, even if their means are the same.\n",
        "\n",
        "4. Normal Distribution:\n",
        "In a bell-shaped curve (normal distribution), standard deviation determines how data is distributed:\n",
        "\n",
        "~68% of data lies within 1 standard deviation of the mean\n",
        "\n",
        "~95% within 2\n",
        "\n",
        "~99.7% within 3 (Empirical Rule)\n",
        "\n",
        "5. Supports Decision-Making:\n",
        "Helps analysts, scientists, and businesses make better decisions by understanding the variability in their data.\n",
        "\n",
        "Q16.Define and explain the term range in statistics?\n",
        "\n",
        "Ans Definition: The range is a measure of dispersion (or spread) in a data set. It is the difference between the highest and lowest values in the data.\n",
        "\n",
        "\\text{Range} = \\text{Maximum value} - \\text{Minimum value}\n",
        "\n",
        "Explanation:\n",
        "\n",
        "The range gives a quick idea of how spread out the data is.\n",
        "\n",
        "It shows how extreme the values are by comparing only the two endpoints (the smallest and the largest).\n",
        "\n",
        "While it's simple to calculate, it can be affected by outliers, since it only considers the two most extreme values.\n",
        "\n",
        "Q17.What is the difference between variance and standard deviation?\n",
        "\n",
        "Ans The difference between variance and standard deviation lies in how they express the spread or dispersion of data in a dataset.\n",
        "\n",
        "Variance\n",
        "\n",
        "Definition: Variance measures the average of the squared differences from the mean.\n",
        "\n",
        "Formula:\n",
        "\n",
        "\\text{Variance} (\\sigma^2 \\text{ or } s^2) = \\frac{1}{n} \\sum_{i=1}^{n}(x_i - \\bar{x})^2\n",
        "\n",
        "Purpose: Shows how far data points are spread out, but not in the original unit, making interpretation harder.\n",
        "\n",
        "Standard Deviation\n",
        "\n",
        "Definition: Standard deviation is the square root of the variance, and it gives the average distance of data points from the mean.\n",
        "\n",
        "Formula:\n",
        "\n",
        "\\text{Standard Deviation} (\\sigma \\text{ or } s) = \\sqrt{\\text{Variance}}\n",
        "\n",
        "Q18.What is skewness in a dataset?\n",
        "\n",
        "Ans Skewness is a measure of the asymmetry of a dataset's distribution around its mean.\n",
        "\n",
        "Types of Skewness:\n",
        "\n",
        "1. Symmetrical (Skewness = 0):\n",
        "\n",
        "The left and right sides of the distribution are mirror images.\n",
        "\n",
        "Example: Normal distribution (bell-shaped curve).\n",
        "\n",
        "2. Positive Skew (Right Skewed, Skewness > 0):\n",
        "\n",
        "The right tail is longer or fatter than the left.\n",
        "\n",
        "The mean > median > mode.\n",
        "\n",
        "Example: Income distribution (few very high values pull the mean right).\n",
        "\n",
        "\n",
        "3. Negative Skew (Left Skewed, Skewness < 0):\n",
        "\n",
        "The left tail is longer or fatter than the right.\n",
        "\n",
        "The mean < median < mode.\n",
        "\n",
        "Q19.What does it mean if a dataset is positively or negatively skewed?\n",
        "\n",
        "Ans When a dataset is skewed, it means that the data is not symmetrically distributed—it’s lopsided. The skewness tells us about the direction of the tail on a distribution curve.\n",
        "\n",
        "Positively Skewed (Right Skewed)\n",
        "\n",
        "Tail on the right (more extreme high values).\n",
        "\n",
        "Most data points are clustered on the left (lower values).\n",
        "\n",
        "Mean > Median > Mode\n",
        "\n",
        "Example:\n",
        "\n",
        "Income distribution in a population (a few people earn very high salaries, pulling the mean up).\n",
        "\n",
        "📊 Looks like:\n",
        "\n",
        "*\n",
        "  ***\n",
        " *****\n",
        "*******\n",
        "     ****\n",
        "        **\n",
        "          *\n",
        "Negatively Skewed (Left Skewed)\n",
        "\n",
        "Tail on the left (more extreme low values).\n",
        "\n",
        "Most data points are clustered on the right (higher values).\n",
        "\n",
        "Mean < Median < Mode\n",
        "\n",
        "Example:\n",
        "\n",
        "Exam scores where most students perform well, but a few do poorly.\n",
        "\n",
        "📊 Looks like:\n",
        "\n",
        "*\n",
        "       **\n",
        "     ****\n",
        "  *******\n",
        " *****\n",
        " ***\n",
        " *\n",
        "\n",
        "Q20.Define and explain kurtosis?\n",
        "\n",
        "Ans Kurtosis is a statistical measure that describes the \"tailedness\" or peakedness of a distribution—how heavily the tails differ from a normal distribution.\n",
        "\n",
        "In simple terms, kurtosis tells us about the likelihood of extreme values (outliers) in the data.\n",
        "\n",
        "Types of Kurtosis\n",
        "\n",
        "There are three main types of kurtosis:\n",
        "\n",
        "Type    Description Tails   Peak    Kurtosis Value\n",
        "\n",
        "Mesokurtic  Normal distribution Medium  Normal bell-shaped peak ≈ 3\n",
        "Leptokurtic More peaked than normal, heavy tails    Fat tails (more outliers)   Sharp peak  > 3\n",
        "Platykurtic Flatter than normal, light tails    Thin tails (fewer outliers) Broad/flat peak < 3\n",
        "\n",
        "Q21.What is the purpose of covariance?\n",
        "\n",
        "Ans Purpose of Covariance\n",
        "\n",
        "Covariance is a statistical measure used to determine the direction of the linear relationship between two variables.\n",
        "\n",
        "Key Purpose:\n",
        "\n",
        "To understand how two variables change together.\n",
        "\n",
        "It tells us whether an increase in one variable tends to result in an increase or decrease in another.\n",
        "\n",
        "Interpretation:\n",
        "\n",
        "Covariance Value    Meaning\n",
        "\n",
        "> 0 (Positive)  Variables move in the same direction (as one increases, the other tends to increase).\n",
        "< 0 (Negative)  Variables move in opposite directions (as one increases, the other tends to decrease).\n",
        "= 0 No linear relationship between the variables.\n",
        "\n",
        "Why is Covariance Useful?\n",
        "\n",
        "1. Initial Insight:\n",
        "\n",
        "It helps identify relationships before applying more advanced tools like correlation or regression.\n",
        "\n",
        "2. Foundation for Correlation:\n",
        "\n",
        "Correlation is just standardized covariance (scaled between -1 and 1 for easier interpretation).\n",
        "\n",
        "3. Used in Portfolio Theory (Finance):\n",
        "\n",
        "To measure how two assets move together. A diversified portfolio uses assets with low or negative covariance.\n",
        "\n",
        "4. Basis for Machine Learning Algorithms:\n",
        "\n",
        "Covariance matrices are used in Principal Component Analysis (PCA) to reduce dimensionality.\n",
        "\n",
        "Q22.What does correlation measure in statistics?\n",
        "\n",
        "In statistics, correlation measures the strength and direction of the linear relationship between two variables.\n",
        "\n",
        "Key Points:\n",
        "\n",
        "It tells you how closely related two variables are.\n",
        "\n",
        "The most common measure is the Pearson correlation coefficient (r), which ranges from -1 to +1:\n",
        "\n",
        "+1: Perfect positive linear relationship\n",
        "\n",
        "-1: Perfect negative linear relationship\n",
        "\n",
        "0: No linear relationship\n",
        "\n",
        "Q23.What is the difference between covariance and correlation?\n",
        "\n",
        "Ans The difference between covariance and correlation lies in how they measure the relationship between two variables and how interpretable their values are.\n",
        "\n",
        "Covariance\n",
        "\n",
        "Definition: Measures how two variables vary together.\n",
        "\n",
        "Value: Can range from –∞ to +∞.\n",
        "\n",
        "Positive: Variables increase together.\n",
        "\n",
        "Negative: One increases while the other decreases.\n",
        "\n",
        "Units: Depends on the units of the variables (not standardized).\n",
        "\n",
        "Interpretation: Hard to compare across datasets because of units.\n",
        "\n",
        "Correlation\n",
        "\n",
        "Definition: Measures both the strength and direction of a linear relationship between two variables.\n",
        "\n",
        "Value: Always between –1 and +1.\n",
        "\n",
        "+1 = perfect positive linear relationship\n",
        "\n",
        "–1 = perfect negative linear relationship\n",
        "\n",
        "0 = no linear relationship\n",
        "\n",
        "Units: Unitless (standardized form of covariance).\n",
        "\n",
        "Interpretation: Easy to compare across different datasets.\n",
        "\n",
        "Q24.What are some real-world applications of statistics?\n",
        "\n",
        "Ans Statistics has a wide range of real-world applications across various fields. Here are some key examples:\n",
        "\n",
        "1. Business and Marketing\n",
        "\n",
        "Customer Insights: Analyzing customer preferences, behavior, and satisfaction.\n",
        "\n",
        "Market Research: Designing surveys, analyzing demand, and identifying target audiences.\n",
        "\n",
        "Sales Forecasting: Predicting future sales based on past data trends.\n",
        "\n",
        "A/B Testing: Comparing marketing strategies or web designs to see which performs better.\n",
        "\n",
        "2. Healthcare and Medicine\n",
        "\n",
        "Clinical Trials: Evaluating the effectiveness of new drugs or treatments.\n",
        "\n",
        "Epidemiology: Studying disease outbreaks and health trends (e.g., COVID-19 tracking).\n",
        "\n",
        "Medical Diagnostics: Using statistical models to assist in diagnosis and treatment planning.\n",
        "\n",
        "Risk Analysis: Predicting health risks based on patient data.\n",
        "\n",
        "3. Finance and Economics\n",
        "\n",
        "Risk Management: Assessing investment risks and returns.\n",
        "\n",
        "Stock Market Analysis: Modeling price movements using statistical techniques.\n",
        "\n",
        "Economic Forecasting: Predicting inflation, unemployment, or GDP growth.\n",
        "\n",
        "Credit Scoring: Using statistical models to evaluate loan applicants.\n",
        "\n",
        "4. Government and Public Policy\n",
        "\n",
        "Census Data: Collecting and analyzing population data for planning and representation.\n",
        "\n",
        "Policy Evaluation: Measuring the impact of social or economic policies.\n",
        "\n",
        "Crime Statistics: Tracking and analyzing crime trends to inform policing strategies.\n",
        "\n",
        "5. Science and Research\n",
        "\n",
        "Experimental Design: Planning experiments and analyzing results.\n",
        "\n",
        "Hypothesis Testing: Determining the validity of scientific claims.\n",
        "\n",
        "Environmental Studies: Analyzing climate data, pollution levels, or biodiversity trends.\n",
        "\n",
        "6. Education\n",
        "\n",
        "Standardized Testing: Analyzing test scores and student performance.\n",
        "\n",
        "Curriculum Development: Evaluating the effectiveness of teaching methods.\n",
        "\n",
        "Institutional Research: Understanding student retention, graduation rates, etc.\n",
        "\n",
        "7. Technology and Data Science\n",
        "\n",
        "Machine Learning: Using statistical algorithms for prediction and classification.\n",
        "\n",
        "Data Mining: Extracting patterns from large datasets.\n",
        "\n",
        "Quality Control: Monitoring manufacturing processes and product quality.\n",
        "\n",
        "\n",
        "       \n",
        "         Practical question"
      ],
      "metadata": {
        "id": "o2pbqrOmSUo2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "1.How do you calculate the mean, median, and mode of a dataset?\n",
        "\n",
        "A Mean (Average) Formula:\n",
        "1.Mean Sum of all values/ Number of values​\n",
        "Example: For [4, 5, 6], Mean = (4 + 5 + 6) ÷ 3 = 5\n",
        "\n",
        "2.Median (Middle value) Steps:\n",
        "Arrange data in ascending order.\n",
        "If odd number of values → middle value\n",
        "If even number of values → average of two middle values\n",
        "Example:\n",
        "Odd: [3, 5, 7] → Median = 5\n",
        "Even: [2, 4, 6, 8] → Median = (4 + 6)/2 = 5\n",
        "\n",
        "3.Mode (Most frequent value)\n",
        "Definition: The number that appears most often.\n",
        "Example: [2, 3, 3, 5, 6] → Mode = 3\n",
        "A dataset can have no mode, one mode, or more than one mode (bimodal/multimodal)."
      ],
      "metadata": {
        "id": "YXDA0ge4XGk0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "2.Write a Python program to compute the variance and standard deviation of a dataset.import math\n",
        "\n",
        "# Sample dataset\n",
        "data = [10, 15, 20, 25, 30]\n",
        "\n",
        "# Step 1: Calculate the mean\n",
        "mean = sum(data) / len(data)\n",
        "\n",
        "# Step 2: Calculate variance\n",
        "variance = sum((x - mean) ** 2 for x in data) / (len(data) - 1)  # Sample variance\n",
        "\n",
        "# Step 3: Calculate standard deviation\n",
        "std_deviation = math.sqrt(variance)\n",
        "\n",
        "# Output results\n",
        "print(f\"Mean: {mean}\")\n",
        "print(f\"Variance: {variance}\")\n",
        "print(f\"Standard Deviation: {std_deviation}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VAgpiB9SYqgT",
        "outputId": "08ffeb0d-754f-4def-be87-509c81252a94"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean: 20.0\n",
            "Variance: 62.5\n",
            "Standard Deviation: 7.905694150420948\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "3.Create a dataset and classify it into nominal, ordinal, interval, and ratio types.\n",
        "\n",
        "# Define the dataset as a list of dictionaries\n",
        "students = [\n",
        "    {\"Name\": \"Aditi\", \"Gender\": \"Female\", \"Grade\": \"Excellent\", \"Temperature\": 38, \"Marks\": 92, \"Age\": 20},\n",
        "    {\"Name\": \"Rohan\", \"Gender\": \"Male\", \"Grade\": \"Good\", \"Temperature\": 36, \"Marks\": 85, \"Age\": 21},\n",
        "    {\"Name\": \"Meena\", \"Gender\": \"Female\", \"Grade\": \"Average\", \"Temperature\": 37, \"Marks\": 70, \"Age\": 19},\n",
        "    {\"Name\": \"Karan\", \"Gender\": \"Male\", \"Grade\": \"Poor\", \"Temperature\": 35, \"Marks\": 55, \"Age\": 22}\n",
        "]\n",
        "\n",
        "# Classification dictionary\n",
        "classification = {\n",
        "    \"Name\": \"Nominal - Just labels with no order\",\n",
        "    \"Gender\": \"Nominal - Categories like Male/Female\",\n",
        "    \"Grade\": \"Ordinal - Ranked levels (Excellent > Good > Average > Poor)\",\n",
        "    \"Temperature\": \"Interval - Numeric with equal intervals, no true zero\",\n",
        "    \"Marks\": \"Ratio - Numeric with true zero, allows comparison like 'twice as much'\",\n",
        "    \"Age\": \"Ratio - Numeric with true zero, measurable age\"\n",
        "}\n",
        "\n",
        "# Print the dataset\n",
        "print(\"Student Dataset:\\n\")\n",
        "for student in students:\n",
        "    print(student)\n",
        "\n",
        "print(\"\\nData Type Classification:\\n\")\n",
        "for column, dtype in classification.items():\n",
        "    print(f\"{column}: {dtype}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-s1Vcoz9ZGV6",
        "outputId": "15f0805a-5f1d-4cf0-9ccd-ca4b706288fa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Student Dataset:\n",
            "\n",
            "{'Name': 'Aditi', 'Gender': 'Female', 'Grade': 'Excellent', 'Temperature': 38, 'Marks': 92, 'Age': 20}\n",
            "{'Name': 'Rohan', 'Gender': 'Male', 'Grade': 'Good', 'Temperature': 36, 'Marks': 85, 'Age': 21}\n",
            "{'Name': 'Meena', 'Gender': 'Female', 'Grade': 'Average', 'Temperature': 37, 'Marks': 70, 'Age': 19}\n",
            "{'Name': 'Karan', 'Gender': 'Male', 'Grade': 'Poor', 'Temperature': 35, 'Marks': 55, 'Age': 22}\n",
            "\n",
            "Data Type Classification:\n",
            "\n",
            "Name: Nominal - Just labels with no order\n",
            "Gender: Nominal - Categories like Male/Female\n",
            "Grade: Ordinal - Ranked levels (Excellent > Good > Average > Poor)\n",
            "Temperature: Interval - Numeric with equal intervals, no true zero\n",
            "Marks: Ratio - Numeric with true zero, allows comparison like 'twice as much'\n",
            "Age: Ratio - Numeric with true zero, measurable age\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "4.Implement sampling techniques like random sampling and stratified sampling.\n",
        "\n",
        "import random\n",
        "import pandas as pd\n",
        "\n",
        "# Sample dataset\n",
        "data = {\n",
        "    \"Name\": [\"Aditi\", \"Rohan\", \"Meena\", \"Karan\", \"Simran\", \"Aman\", \"Priya\", \"Rahul\"],\n",
        "    \"Gender\": [\"Female\", \"Male\", \"Female\", \"Male\", \"Female\", \"Male\", \"Female\", \"Male\"],\n",
        "    \"Grade\": [\"Excellent\", \"Good\", \"Average\", \"Poor\", \"Good\", \"Average\", \"Excellent\", \"Poor\"]\n",
        "}\n",
        "\n",
        "# Convert to DataFrame\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# ----------- RANDOM SAMPLING -----------\n",
        "print(\"\\n🔹 Random Sampling (3 samples):\")\n",
        "random_sample = df.sample(n=3, random_state=1)  # random_state for reproducibility\n",
        "print(random_sample)\n",
        "\n",
        "# ----------- STRATIFIED SAMPLING -----------\n",
        "print(\"\\n🔹 Stratified Sampling by 'Gender' (1 sample per group):\")\n",
        "stratified_sample = df.groupby(\"Gender\", group_keys=False).apply(lambda x: x.sample(n=1, random_state=1))\n",
        "print(stratified_sample)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pCHiwuGaZpco",
        "outputId": "d402e22a-220c-41de-ad79-648d33dad54f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "🔹 Random Sampling (3 samples):\n",
            "    Name  Gender    Grade\n",
            "7  Rahul    Male     Poor\n",
            "2  Meena  Female  Average\n",
            "1  Rohan    Male     Good\n",
            "\n",
            "🔹 Stratified Sampling by 'Gender' (1 sample per group):\n",
            "    Name  Gender      Grade\n",
            "6  Priya  Female  Excellent\n",
            "7  Rahul    Male       Poor\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-4-1331073553.py:21: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
            "  stratified_sample = df.groupby(\"Gender\", group_keys=False).apply(lambda x: x.sample(n=1, random_state=1))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "5.Write a Python function to calculate the range of a dataset.\n",
        "\n",
        "def calculate_range(data):\n",
        "    if not data:\n",
        "        return None  # Return None for empty dataset\n",
        "    return max(data) - min(data)\n",
        "\n",
        "# Example usage:\n",
        "dataset = [10, 25, 18, 30, 15]\n",
        "result = calculate_range(dataset)\n",
        "print(f\"Range of the dataset: {result}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0T6Hvj6haEwW",
        "outputId": "1912ac57-9b14-4c1b-cb08-845ef754f2ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Range of the dataset: 20\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "6.Create a dataset and plot its histogram to visualize skewness.\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Create skewed datasets\n",
        "np.random.seed(0)\n",
        "\n",
        "# Positively skewed (Right skewed) data\n",
        "right_skewed = np.random.exponential(scale=2.0, size=1000)\n",
        "\n",
        "# Negatively skewed (Left skewed) data by flipping right skewed\n",
        "left_skewed = -np.random.exponential(scale=2.0, size=1000)\n",
        "\n",
        "# Plot histograms\n",
        "plt.figure(figsize=(12, 5))\n",
        "\n",
        "# Right skewed\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.hist(right_skewed, bins=30, color='skyblue', edgecolor='black')\n",
        "plt.title(\"Positively Skewed (Right Skewed)\")\n",
        "plt.xlabel(\"Value\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "\n",
        "# Left skewed\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.hist(left_skewed, bins=30, color='lightcoral', edgecolor='black')\n",
        "plt.title(\"Negatively Skewed (Left Skewed)\")\n",
        "plt.xlabel(\"Value\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 129
        },
        "id": "cSCk7xRqayFA",
        "outputId": "5537a782-1e29-4f7b-97fd-39c6a06f8d45"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "7.Calculate skewness and kurtosis of a dataset using Python libraries.\n",
        "\n",
        "import pandas as pd\n",
        "from scipy.stats import skew, kurtosis\n",
        "\n",
        "# Sample dataset\n",
        "data = [10, 12, 13, 15, 18, 20, 25, 30, 35, 50]\n",
        "\n",
        "# Convert to Pandas Series\n",
        "series = pd.Series(data)\n",
        "\n",
        "# Calculate skewness and kurtosis\n",
        "data_skewness = skew(series)\n",
        "data_kurtosis = kurtosis(series)  # By default, it returns excess kurtosis (normal = 0)\n",
        "\n",
        "# Print results\n",
        "print(f\"Skewness: {data_skewness:.2f}\")\n",
        "print(f\"Kurtosis: {data_kurtosis:.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eaCl-pVcbiqU",
        "outputId": "b4bfc0c3-6f09-4888-c81d-34b70144d084"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Skewness: 1.04\n",
            "Kurtosis: 0.13\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "8.Generate a dataset and demonstrate positive and negative skewness.\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.stats import skew\n",
        "\n",
        "# Set seed for reproducibility\n",
        "np.random.seed(42)\n",
        "\n",
        "# Generate datasets\n",
        "# Positively skewed data (Right-skewed): Exponential distribution\n",
        "positive_skew_data = np.random.exponential(scale=2.0, size=1000)\n",
        "\n",
        "# Negatively skewed data (Left-skewed): Flip the positive skew\n",
        "negative_skew_data = -np.random.exponential(scale=2.0, size=1000)\n",
        "\n",
        "# Calculate skewness\n",
        "positive_skewness = skew(positive_skew_data)\n",
        "negative_skewness = skew(negative_skew_data)\n",
        "\n",
        "# Print skewness values\n",
        "print(f\"Positive Skewness: {positive_skewness:.2f}\")\n",
        "print(f\"Negative Skewness: {negative_skewness:.2f}\")\n",
        "\n",
        "# Plot histograms\n",
        "plt.figure(figsize=(12, 5))\n",
        "\n",
        "# Positive Skew\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.hist(positive_skew_data, bins=30, color='skyblue', edgecolor='black')\n",
        "plt.title(f'Positively Skewed\\nSkewness = {positive_skewness:.2f}')\n",
        "plt.xlabel('Value')\n",
        "plt.ylabel('Frequency')\n",
        "\n",
        "# Negative Skew\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.hist(negative_skew_data, bins=30, color='salmon', edgecolor='black')\n",
        "plt.title(f'Negatively Skewed\\nSkewness = {negative_skewness:.2f}')\n",
        "plt.xlabel('Value')\n",
        "plt.ylabel('Frequency')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 163
        },
        "id": "wEFBN7yPcTie",
        "outputId": "8c7b9085-d72d-48c5-c34e-ddd5402432b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Positive Skewness: 1.87\n",
            "Negative Skewness: -1.99\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "9.Write a Python script to calculate covariance between two datasets.\n",
        "\n",
        "import numpy as np\n",
        "\n",
        "# Two sample datasets\n",
        "x = [2, 4, 6, 8, 10]\n",
        "y = [1, 3, 2, 5, 7]\n",
        "\n",
        "# ---- Method 1: Manual Calculation (Sample Covariance) ----\n",
        "def calculate_covariance(x, y):\n",
        "    n = len(x)\n",
        "    mean_x = sum(x) / n\n",
        "    mean_y = sum(y) / n\n",
        "    covariance = sum((x[i] - mean_x) * (y[i] - mean_y) for i in range(n)) / (n - 1)\n",
        "    return covariance\n",
        "\n",
        "manual_cov = calculate_covariance(x, y)\n",
        "\n",
        "# ---- Method 2: NumPy Covariance ----\n",
        "np_cov_matrix = np.cov(x, y)  # Returns a 2x2 matrix\n",
        "np_cov = np_cov_matrix[0, 1]  # Covariance between x and y\n",
        "\n",
        "# ---- Output Results ----\n",
        "print(f\"Manual Covariance: {manual_cov:.2f}\")\n",
        "print(f\"NumPy Covariance: {np_cov:.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XVjhTjyQc0jQ",
        "outputId": "5c65f36d-4e16-457b-9d66-0dfc226840eb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Manual Covariance: 7.00\n",
            "NumPy Covariance: 7.00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "10.Write a Python script to calculate the correlation coefficient between two datasets.\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# Sample datasets\n",
        "x = [2, 4, 6, 8, 10]\n",
        "y = [1, 3, 2, 5, 7]\n",
        "\n",
        "# ---- Method 1: Manual Pearson Correlation ----\n",
        "def pearson_correlation(x, y):\n",
        "    n = len(x)\n",
        "    mean_x = sum(x) / n\n",
        "    mean_y = sum(y) / n\n",
        "\n",
        "    numerator = sum((x[i] - mean_x) * (y[i] - mean_y) for i in range(n))\n",
        "    denominator = (sum((x[i] - mean_x)**2 for i in range(n)) * sum((y[i] - mean_y)**2 for i in range(n)))**0.5\n",
        "\n",
        "    return numerator / denominator\n",
        "\n",
        "manual_corr = pearson_correlation(x, y)\n",
        "\n",
        "# ---- Method 2: NumPy ----\n",
        "np_corr_matrix = np.corrcoef(x, y)  # 2x2 correlation matrix\n",
        "np_corr = np_corr_matrix[0, 1]\n",
        "\n",
        "# ---- Method 3: Pandas (Optional) ----\n",
        "df = pd.DataFrame({'x': x, 'y': y})\n",
        "pd_corr = df.corr().iloc[0, 1]\n",
        "\n",
        "# ---- Output ----\n",
        "print(f\"Manual Correlation Coefficient: {manual_corr:.2f}\")\n",
        "print(f\"NumPy Correlation Coefficient: {np_corr:.2f}\")\n",
        "print(f\"Pandas Correlation Coefficient: {pd_corr:.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BpONtT0odkPC",
        "outputId": "94abb80c-fae1-41dd-abbf-959660575e7a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Manual Correlation Coefficient: 0.92\n",
            "NumPy Correlation Coefficient: 0.92\n",
            "Pandas Correlation Coefficient: 0.92\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "11.Create a scatter plot to visualize the relationship between two variables.\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Sample datasets (x and y)\n",
        "x = [2, 4, 6, 8, 10]\n",
        "y = [1, 3, 2, 5, 7]\n",
        "\n",
        "# Create scatter plot\n",
        "plt.figure(figsize=(6, 4))\n",
        "plt.scatter(x, y, color='blue', edgecolor='black', s=70)\n",
        "\n",
        "# Add labels and title\n",
        "plt.title(\"Scatter Plot of X vs Y\")\n",
        "plt.xlabel(\"X Values\")\n",
        "plt.ylabel(\"Y Values\")\n",
        "\n",
        "# Optional: Add grid\n",
        "plt.grid(True)\n",
        "\n",
        "# Show plot\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        },
        "id": "_ugAW7H4eQai",
        "outputId": "9e4850b6-ad2d-420d-985b-92498c7ac9a7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "12.Implement and compare simple random sampling and systematic sampling.\n",
        "\n",
        "import pandas as pd\n",
        "import random\n",
        "\n",
        "# Create a dataset of 20 students\n",
        "data = {\n",
        "    'ID': list(range(1, 21)),\n",
        "    'Name': [f'Student{i}' for i in range(1, 21)],\n",
        "    'Marks': [random.randint(50, 100) for _ in range(20)]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "print(\"🎓 Original Dataset:\\n\", df)\n",
        "\n",
        "# -------------------------------\n",
        "# SIMPLE RANDOM SAMPLING\n",
        "# -------------------------------\n",
        "def simple_random_sampling(df, sample_size):\n",
        "    return df.sample(n=sample_size, random_state=1)\n",
        "\n",
        "# -------------------------------\n",
        "# SYSTEMATIC SAMPLING\n",
        "# -------------------------------\n",
        "def systematic_sampling(df, sample_size):\n",
        "    step = len(df) // sample_size\n",
        "    start = random.randint(0, step - 1)\n",
        "    indexes = list(range(start, len(df), step))\n",
        "    return df.iloc[indexes[:sample_size]]\n",
        "\n",
        "# Sample size\n",
        "n = 5\n",
        "\n",
        "# Apply both sampling techniques\n",
        "simple_sample = simple_random_sampling(df, n)\n",
        "systematic_sample = systematic_sampling(df, n)\n",
        "\n",
        "# -------------------------------\n",
        "# DISPLAY RESULTS\n",
        "# -------------------------------\n",
        "print(\"\\n🎯 Simple Random Sampling:\\n\", simple_sample)\n",
        "print(\"\\n📏 Systematic Sampling:\\n\", systematic_sample)"
      ],
      "metadata": {
        "id": "s9ah8DbFetdC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1de61b26-ee0b-4fab-9699-f2798ddebf82"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🎓 Original Dataset:\n",
            "     ID       Name  Marks\n",
            "0    1   Student1     65\n",
            "1    2   Student2     71\n",
            "2    3   Student3     71\n",
            "3    4   Student4     95\n",
            "4    5   Student5     78\n",
            "5    6   Student6     70\n",
            "6    7   Student7     83\n",
            "7    8   Student8    100\n",
            "8    9   Student9     81\n",
            "9   10  Student10     80\n",
            "10  11  Student11    100\n",
            "11  12  Student12     53\n",
            "12  13  Student13     72\n",
            "13  14  Student14     85\n",
            "14  15  Student15     93\n",
            "15  16  Student16     86\n",
            "16  17  Student17     65\n",
            "17  18  Student18     96\n",
            "18  19  Student19     89\n",
            "19  20  Student20     55\n",
            "\n",
            "🎯 Simple Random Sampling:\n",
            "     ID       Name  Marks\n",
            "3    4   Student4     95\n",
            "16  17  Student17     65\n",
            "6    7   Student7     83\n",
            "10  11  Student11    100\n",
            "2    3   Student3     71\n",
            "\n",
            "📏 Systematic Sampling:\n",
            "     ID       Name  Marks\n",
            "2    3   Student3     71\n",
            "6    7   Student7     83\n",
            "10  11  Student11    100\n",
            "14  15  Student15     93\n",
            "18  19  Student19     89\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "13.Calculate the mean, median, and mode of grouped data.\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "# Sample grouped data (class intervals and their frequencies)\n",
        "data = {\n",
        "    'Class Interval': ['0-10', '10-20', '20-30', '30-40', '40-50'],\n",
        "    'Frequency': [5, 8, 15, 16, 6]\n",
        "}\n",
        "\n",
        "# Convert to DataFrame\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Calculate class midpoints\n",
        "def midpoint(interval):\n",
        "    lower, upper = map(int, interval.split('-'))\n",
        "    return (lower + upper) / 2\n",
        "\n",
        "df['Midpoint'] = df['Class Interval'].apply(midpoint)\n",
        "\n",
        "# ----------------------\n",
        "# MEAN of grouped data\n",
        "# ----------------------\n",
        "mean = (df['Midpoint'] * df['Frequency']).sum() / df['Frequency'].sum()\n",
        "\n",
        "# ----------------------\n",
        "# MEDIAN of grouped data\n",
        "# ----------------------\n",
        "# Step 1: Add cumulative frequency\n",
        "df['Cumulative Frequency'] = df['Frequency'].cumsum()\n",
        "N = df['Frequency'].sum()\n",
        "median_class_index = df[df['Cumulative Frequency'] >= N / 2].index[0]\n",
        "\n",
        "# Extract values for median formula\n",
        "L = int(df.loc[median_class_index, 'Class Interval'].split('-')[0])      # Lower boundary\n",
        "f = df.loc[median_class_index, 'Frequency']                              # Frequency of median class\n",
        "CF = df.loc[median_class_index - 1, 'Cumulative Frequency'] if median_class_index > 0 else 0\n",
        "h = int(df.loc[median_class_index, 'Class Interval'].split('-')[1]) - L  # Class width\n",
        "\n",
        "# Median formula\n",
        "median = L + ((N / 2 - CF) / f) * h\n",
        "\n",
        "# ----------------------\n",
        "# MODE of grouped data\n",
        "# ----------------------\n",
        "modal_class_index = df['Frequency'].idxmax()\n",
        "\n",
        "# Extract values\n",
        "L = int(df.loc[modal_class_index, 'Class Interval'].split('-')[0])\n",
        "f1 = df.loc[modal_class_index, 'Frequency']\n",
        "f0 = df.loc[modal_class_index - 1, 'Frequency'] if modal_class_index > 0 else 0\n",
        "f2 = df.loc[modal_class_index + 1, 'Frequency'] if modal_class_index + 1 < len(df) else 0\n",
        "h = int(df.loc[modal_class_index, 'Class Interval'].split('-')[1]) - L\n",
        "\n",
        "# Mode formula\n",
        "mode = L + ((f1 - f0) / ((2 * f1) - f0 - f2)) * h\n",
        "\n",
        "# ----------------------\n",
        "# Print Results\n",
        "# ----------------------\n",
        "print(f\"Grouped Mean: {mean:.2f}\")\n",
        "print(f\"Grouped Median: {median:.2f}\")\n",
        "print(f\"Grouped Mode: {mode:.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WtIkEsgRPYkM",
        "outputId": "90e9c1bc-1738-4549-bcae-ce5a5c202929"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Grouped Mean: 27.00\n",
            "Grouped Median: 28.00\n",
            "Grouped Mode: 30.91\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "14.Simulate data using Python and calculate its central tendency and dispersion.\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from scipy import stats\n",
        "\n",
        "# Step 1: Simulate data (e.g., exam scores)\n",
        "np.random.seed(42)\n",
        "data = np.random.normal(loc=70, scale=10, size=100)  # Mean=70, SD=10, n=100\n",
        "\n",
        "# Convert to a Pandas Series\n",
        "data_series = pd.Series(data)\n",
        "\n",
        "# Step 2: Central Tendency\n",
        "mean = data_series.mean()\n",
        "median = data_series.median()\n",
        "mode = data_series.mode().iloc[0]  # Handle multi-modal by picking the first\n",
        "\n",
        "# Step 3: Dispersion\n",
        "data_range = data_series.max() - data_series.min()\n",
        "variance = data_series.var()\n",
        "std_dev = data_series.std()\n",
        "\n",
        "# Step 4: Print Results\n",
        "print(\"📊 Central Tendency:\")\n",
        "print(f\"Mean: {mean:.2f}\")\n",
        "print(f\"Median: {median:.2f}\")\n",
        "print(f\"Mode: {mode:.2f}\")\n",
        "\n",
        "print(\"\\n📉 Dispersion:\")\n",
        "print(f\"Range: {data_range:.2f}\")\n",
        "print(f\"Variance: {variance:.2f}\")\n",
        "print(f\"Standard Deviation: {std_dev:.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WpWAo6CPP3Hx",
        "outputId": "6d285e52-cf70-488c-aa05-0f04f3895d9e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📊 Central Tendency:\n",
            "Mean: 68.96\n",
            "Median: 68.73\n",
            "Mode: 43.80\n",
            "\n",
            "📉 Dispersion:\n",
            "Range: 44.72\n",
            "Variance: 82.48\n",
            "Standard Deviation: 9.08\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "15.Use NumPy or pandas to summarize a dataset’s descriptive statistics.\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Simulate a dataset (e.g., student scores and ages)\n",
        "data = {\n",
        "    'Scores': np.random.normal(75, 10, 100),\n",
        "    'Ages': np.random.randint(18, 25, 100)\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Get descriptive statistics\n",
        "summary = df.describe()\n",
        "\n",
        "print(\"📊 Descriptive Statistics using Pandas:\")\n",
        "print(summary)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y6-0kcqzQPnV",
        "outputId": "c1648d38-8373-42f4-b75c-ccef3b8b69b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📊 Descriptive Statistics using Pandas:\n",
            "           Scores        Ages\n",
            "count  100.000000  100.000000\n",
            "mean    75.223046   21.040000\n",
            "std      9.536690    2.073985\n",
            "min     55.812288   18.000000\n",
            "25%     66.943395   19.000000\n",
            "50%     75.841072   21.000000\n",
            "75%     80.381704   23.000000\n",
            "max    102.201692   24.000000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "16.Plot a boxplot to understand the spread and identify outliers.\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "\n",
        "# Step 1: Simulate a dataset (e.g., test scores)\n",
        "np.random.seed(42)\n",
        "data = np.random.normal(75, 10, 100)  # mean=75, std=10, size=100\n",
        "\n",
        "# Add some outliers\n",
        "data = np.append(data, [30, 140])\n",
        "\n",
        "# Step 2: Plot the boxplot\n",
        "plt.figure(figsize=(6, 5))\n",
        "sns.boxplot(data=data, color='skyblue', width=0.4)\n",
        "\n",
        "plt.title(\"Boxplot of Test Scores\")\n",
        "plt.ylabel(\"Scores\")\n",
        "plt.grid(True, axis='y', linestyle='--', alpha=0.7)\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 234
        },
        "id": "y_ph_WXAQlGx",
        "outputId": "ad4721c3-5a67-4117-edd6-28c667c0c17f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "17.Calculate the interquartile range (IQR) of a dataset.\n",
        "\n",
        "import numpy as np\n",
        "\n",
        "# Example dataset\n",
        "data = [10, 12, 14, 15, 18, 21, 22, 25, 27, 30, 50]\n",
        "\n",
        "# Convert to numpy array\n",
        "data = np.array(data)\n",
        "\n",
        "# Calculate Q1 and Q3\n",
        "q1 = np.percentile(data, 25)\n",
        "q3 = np.percentile(data, 75)\n",
        "\n",
        "# Calculate IQR\n",
        "iqr = q3 - q1\n",
        "\n",
        "# Output\n",
        "print(f\"Q1 (25th percentile): {q1}\")\n",
        "print(f\"Q3 (75th percentile): {q3}\")\n",
        "print(f\"IQR (Q3 - Q1): {iqr}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y0niZRW5Q4sm",
        "outputId": "b2d65d4a-b4ca-4cd8-df71-d7fa2206e7cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Q1 (25th percentile): 14.5\n",
            "Q3 (75th percentile): 26.0\n",
            "IQR (Q3 - Q1): 11.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "18.Implement Z-score normalization and explain its significance.\n",
        "\n",
        "Z-score normalization (also called standardization) transforms data to have:\n",
        "Mean = 0\n",
        "Standard deviation = 1\n",
        "Formula: 𝑍\n",
        "𝑋 − 𝜇 𝜎 Z= σ X−μ​\n",
        "Where:\n",
        "𝑋 X = original value\n",
        "𝜇 μ = mean of the dataset\n",
        "𝜎 σ = standard deviation\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# Example data (e.g., test scores)\n",
        "data = np.array([55, 60, 65, 70, 75, 80, 85, 90, 95])\n",
        "\n",
        "# Step 1: Calculate mean and std deviation\n",
        "mean = np.mean(data)\n",
        "std_dev = np.std(data)\n",
        "\n",
        "# Step 2: Apply Z-score normalization\n",
        "z_scores = (data - mean) / std_dev\n",
        "\n",
        "# Convert to DataFrame for display\n",
        "df = pd.DataFrame({'Original': data, 'Z-Score': z_scores})\n",
        "print(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tqC1NuKsRSYN",
        "outputId": "1d2cff37-cfd5-4c1a-9bf3-f57c86817603"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Original   Z-Score\n",
            "0        55 -1.549193\n",
            "1        60 -1.161895\n",
            "2        65 -0.774597\n",
            "3        70 -0.387298\n",
            "4        75  0.000000\n",
            "5        80  0.387298\n",
            "6        85  0.774597\n",
            "7        90  1.161895\n",
            "8        95  1.549193\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "19.Compare two datasets using their standard deviations.\n",
        "\n",
        "import numpy as np\n",
        "\n",
        "# Dataset A: Less variation\n",
        "dataset_A = [70, 72, 71, 69, 68, 72, 71, 70, 69, 71]\n",
        "\n",
        "# Dataset B: More variation\n",
        "dataset_B = [50, 60, 70, 80, 90, 100, 60, 75, 85, 95]\n",
        "\n",
        "# Calculate standard deviations\n",
        "std_A = np.std(dataset_A, ddof=1)  # Sample standard deviation\n",
        "std_B = np.std(dataset_B, ddof=1)\n",
        "\n",
        "# Print results\n",
        "print(f\"Standard Deviation of Dataset A: {std_A:.2f}\")\n",
        "print(f\"Standard Deviation of Dataset B: {std_B:.2f}\")\n",
        "\n",
        "# Compare\n",
        "if std_A < std_B:\n",
        "    print(\"\\n📊 Dataset A has less variability (more consistent values).\")\n",
        "elif std_A > std_B:\n",
        "    print(\"\\n📊 Dataset B has more variability (more spread out).\")\n",
        "else:\n",
        "    print(\"\\n📊 Both datasets have equal variability.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_mFIV8HMSKPZ",
        "outputId": "6afbb592-d771-47ba-941d-4f4f42d2fe73"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Standard Deviation of Dataset A: 1.34\n",
            "Standard Deviation of Dataset B: 16.51\n",
            "\n",
            "📊 Dataset A has less variability (more consistent values).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "20.Write a Python program to visualize covariance using a heatmap.\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Step 1: Simulate a dataset\n",
        "np.random.seed(42)\n",
        "\n",
        "data = {\n",
        "    'Math': np.random.normal(70, 10, 100),\n",
        "    'Science': np.random.normal(65, 15, 100),\n",
        "    'English': np.random.normal(75, 8, 100),\n",
        "    'History': np.random.normal(60, 12, 100)\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Step 2: Calculate the covariance matrix\n",
        "cov_matrix = df.cov()\n",
        "\n",
        "# Step 3: Plot the heatmap\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(cov_matrix, annot=True, fmt=\".2f\", cmap=\"coolwarm\", square=True, linewidths=0.5)\n",
        "\n",
        "# Add title and display\n",
        "plt.title(\"Covariance Matrix Heatmap\")\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        },
        "id": "JW6WbfecSmCN",
        "outputId": "15bb86d0-c779-40f0-f0d0-23b85c8a4216"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "21.Use seaborn to create a correlation matrix for a dataset.\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Step 1: Simulate a dataset\n",
        "np.random.seed(42)\n",
        "data = {\n",
        "    'Math': np.random.normal(70, 10, 100),\n",
        "    'Science': np.random.normal(65, 15, 100),\n",
        "    'English': np.random.normal(75, 8, 100),\n",
        "    'History': np.random.normal(60, 12, 100)\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Step 2: Compute the correlation matrix\n",
        "corr_matrix = df.corr()\n",
        "\n",
        "# Step 3: Plot the correlation heatmap\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(corr_matrix, annot=True, fmt=\".2f\", cmap=\"coolwarm\", square=True, linewidths=0.5)\n",
        "\n",
        "# Add title\n",
        "plt.title(\"Correlation Matrix Heatmap\")\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 258
        },
        "id": "m9G1QkbkTFGx",
        "outputId": "ea87c1cb-889b-4ac7-bd3b-f0a837a5659e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "22.Generate a dataset and implement both variance and standard deviation computations.\n",
        "\n",
        "import numpy as np\n",
        "\n",
        "# Step 1: Generate a dataset\n",
        "np.random.seed(42)\n",
        "data = np.random.randint(50, 100, size=10)  # 10 random integers between 50 and 100\n",
        "\n",
        "print(\"📊 Dataset:\", data)\n",
        "\n",
        "# Step 2: Manual Calculation\n",
        "mean = sum(data) / len(data)\n",
        "squared_diffs = [(x - mean)**2 for x in data]\n",
        "\n",
        "# Sample Variance and Standard Deviation\n",
        "manual_variance = sum(squared_diffs) / (len(data) - 1)\n",
        "manual_std_dev = manual_variance ** 0.5\n",
        "\n",
        "# Step 3: Using NumPy\n",
        "numpy_variance = np.var(data, ddof=1)  # ddof=1 for sample variance\n",
        "numpy_std_dev = np.std(data, ddof=1)\n",
        "\n",
        "# Step 4: Output Results\n",
        "print(\"\\n🔢 Manual Computation:\")\n",
        "print(f\"Mean: {mean:.2f}\")\n",
        "print(f\"Variance: {manual_variance:.2f}\")\n",
        "print(f\"Standard Deviation: {manual_std_dev:.2f}\")\n",
        "\n",
        "print(\"\\n🧮 NumPy Computation:\")\n",
        "print(f\"Variance: {numpy_variance:.2f}\")\n",
        "print(f\"Standard Deviation: {numpy_std_dev:.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MRUbqjl_TbP4",
        "outputId": "1423401c-b045-43d5-868f-5bbbadded5d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📊 Dataset: [88 78 64 92 57 70 88 68 72 60]\n",
            "\n",
            "🔢 Manual Computation:\n",
            "Mean: 73.70\n",
            "Variance: 152.46\n",
            "Standard Deviation: 12.35\n",
            "\n",
            "🧮 NumPy Computation:\n",
            "Variance: 152.46\n",
            "Standard Deviation: 12.35\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "23.Visualize skewness and kurtosis using Python libraries like matplotlib or seaborn.\n",
        "\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.stats import skew, kurtosis\n",
        "\n",
        "# Step 1: Simulate a dataset\n",
        "np.random.seed(42)\n",
        "data = np.random.normal(loc=70, scale=10, size=1000)  # Normally distributed\n",
        "\n",
        "# Add a few outliers to skew the data\n",
        "data = np.append(data, [130, 135, 140])\n",
        "\n",
        "# Step 2: Calculate skewness and kurtosis\n",
        "data_skewness = skew(data)\n",
        "data_kurtosis = kurtosis(data)  # excess kurtosis (normal = 0)\n",
        "\n",
        "# Step 3: Plot histogram and KDE\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.histplot(data, kde=True, color='skyblue', bins=30, edgecolor='black')\n",
        "\n",
        "# Add labels and stats\n",
        "plt.title(\"Histogram with Skewness and Kurtosis\")\n",
        "plt.xlabel(\"Values\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "\n",
        "# Annotate skewness and kurtosis\n",
        "plt.text(x=min(data), y=50,\n",
        "         s=f\"Skewness: {data_skewness:.2f}\\nKurtosis: {data_kurtosis:.2f}\",\n",
        "         fontsize=12, bbox=dict(facecolor='white', edgecolor='black'))\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 185
        },
        "id": "q5PtZ9hET7v1",
        "outputId": "4cad28bf-68ee-444d-e174-4a347d035df6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "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fz+nn366PxFp0qQJX375JRMmTCAzM9M/POe1117jlltu4ZJLLuHWW28lPz+ftWvXsmLFCq688koAbrjhBj788EMmT55Mly5dOHToEN9//z3JycklEscjrVy5kh9//JHRo0fTokULtm/fzksvvcTAgQP5/fffCQsLCzj+5ptvplGjRjz44INs376dmTNnMnnyZN5//33/MQ888ADTpk1j+PDhDB8+nDVr1nDuueficrkq9No9++yz3HHHHVx55ZW89dZbVeqp8Hg8DB06lP79+/Ovf/2LsLAwEhISynzP5uXlMXDgQDZv3szkyZNp06YNc+fOZfz48aSnp3PrrbcChZ/dK664gsGDBzN9+nQAkpOT+eGHH/zHHM3lcjF06FAKCgq4+eabSUhIYPfu3Xz22Wekp6cTHR1d6ccp0qCZIiKlePPNN03gmJeuXbsG3KZVq1bmuHHj/Nd79uxpjhgx4pj3c9NNN5mlfRXNnz/fBMxp06YFbL/kkktMwzDMzZs3m6ZpmqtXrzYB87bbbgs4bvz48SZgPvjgg/5tDz74oAmYV1xxRYn7y83NLbHtv//9rwmYS5YsKdHGdddd59/m8XjMFi1amIZhmE888YR/++HDh83Q0NCA56Q0K1euNAHziy++ME3TNNeuXWsC5qWXXmr27dvXf9z5559vnnzyyf7rixcvNgFz8eLF/m0jRowwW7VqVeI+io/t3LmzWVBQ4N/+7LPPmoD522+/HTPGr7/+2rRarabVajX79etn3n333eZXX31lulyuEscC5k033WSapmnecccdpsViMd966y3//qysLDMmJsacOHFiwO327dtnRkdHB2zv2rWredlll/mv9+7d27z00ktNwExOTjZN0zTnzZtnAuavv/4aEIPD4fC/T0zTNH/99VcTMGfNmuXfNmHCBLNZs2ZmampqQCyjR482o6Oj/e+LCy64oMT7/WjR0dH+x10Rpb33li1bZgLmO++8499W/JkcMmSI6fP5/Ntvv/1202q1munp6aZpmuaBAwdMh8NhjhgxIuC4f/7znyZw3PejaRY+f61atfJ/XjweT4ljSnv/maZpbtu2zQTMN998079t3LhxJmD+4x//KNFOWe/ZmTNnmoD5n//8x7/N5XKZ/fr1MyMiIszMzEzTNE3z1ltvNaOiokqNsaxYf/75ZxMw586de4xnQUQqSkOhROSYXnjhBRYuXFjiUvwL8rHExMSwfv16Nm3aVOH7/eKLL7Bardxyyy0B2++44w5M0/QPByoe2jJp0qSA445VTHzDDTeU2BYaGur/7/z8fFJTUzn99NMBSh3K8re//c3/31arlVNPPRXTNJkwYYJ/e0xMDB07dmTr1q1lxgJw8sknExERwZIlS4DCX+VbtGjB1VdfzZo1a8jNzcU0Tb7//nsGDBhwzLaO55prrgkoYC1u73gxnnPOOSxbtozzzz+fX3/9lRkzZjB06FCaN28eMFyrmGmaTJ48mWeffZb//Oc/jBs3zr9v4cKFpKenc8UVV5Camuq/WK1W+vbty+LFiwPiW7p0KVA41OjXX3/luuuuIy4uzr996dKlxMTElOhJGTJkCG3btvVf79GjB1FRUf7HapomH330ESNHjsQ0zYBYhg4dSkZGhv+1j4mJYdeuXaxcubLM5ygmJoYVK1awZ8+eYz6XRzvyved2uzl06BDt2rUjJiam1PfeddddF9CDNmDAALxeLzt27ABg0aJFuFwubr755oDjKlocvX//fgDatGmD1Wqt0G3LcuONN5b72C+++IKEhASuuOIK/za73c4tt9xCdnY23333HVD4vOfk5PiHWJZHcY/EV199RW5ubrlvJyLHpsRCRI6pT58+DBkypMSlUaNGx73tww8/THp6Oh06dKB79+7cddddAePlj2XHjh0kJiYSGRkZsL1z587+/cX/WiwW2rRpE3Bcu3btymz76GMB0tLSuPXWW4mPjyc0NJQmTZr4jyttzHVSUlLA9ejoaEJCQoiLiyux/fDhw2XGAoWJSb9+/QJOlAcMGED//v3xer0sX76c33//nbS0tConFkfHXfw6Hi9GgNNOO4158+Zx+PBhfvrpJ+655x6ysrK45JJL+P333wOOfeedd3jhhReYNWtWwIkh4E80zz77bJo0aRJw+frrrwOKwQcMGMDevXvZvHkzP/74I4Zh0K9fv4CEY+nSpZxxxhklhukc/ViLH2/xYz148CDp6em8+uqrJeK45pprgD8L0//+978TERFBnz59aN++PTfddBM//PBDQNszZsxg3bp1tGzZkj59+jB16tTjJmxQOOTngQce8NcSxcXF0aRJE9LT08v13jv6NSz+bLRv3z7guCZNmpTrc1ts3LhxjBw5ksceeyxg6GFl2Ww2WrRoUe7jd+zYQfv27Uu8rkd/B0yaNIkOHTowbNgwWrRowbXXXltqLc2R2rRpw5QpU/j3v/9NXFwcQ4cO5YUXXlB9hUgVKbEQkRpz5plnsmXLFt544w26devGv//9b3r37s2///3voMZ15C/ExS677DJee+01brjhBubNm8fXX3/tPzkpbb7+0n7BLetXXfOoYvPS9O/fn5UrV5Kfn+9PLIp/hV+6dKn/JLqqiUVVYizmcDg47bTTeOyxx3jppZdwu93MnTs34JgzzjiD+Ph4nn/+edLS0gL2FT+f7777bqm9YZ988on/2OLi+iVLlrB06VJ69+5NeHi4P7HIzs7m559/LvV5Od5jLY5j7NixpcaxcOFCfz1L586d2bhxI++99x79+/fno48+on///jz44IP+di+77DK2bt3KrFmzSExM5Mknn6Rr167+3rWy3HzzzTz66KNcdtllfPDBB3z99dcsXLiQxo0bl/u9d+Tjqi42m40PPviAs846izvuuIM333wzYP/RdUfFvF5vqdudTme1TVF7pKZNm/LLL7/w6aef+uuyhg0bFtBLVpqnnnqKtWvX8s9//tM/AUTXrl3ZtWtXtcco0lCoeFtEalRsbCzXXHMN11xzDdnZ2Zx55plMnTrVP5SorJOTVq1asWjRIrKysgJ6LTZs2ODfX/yvz+dj27ZtAb/Qlmemo2KHDx/mm2++4aGHHuKBBx7wb6/MEK7KGjBgAC6Xi//+97/s3r3bf6J85plnsnTpUuLj4+nQoQPx8fHHbKes57OmnHrqqQDs3bs3YHu7du2YMWMGAwcO5LzzzuObb77xv47Fw5OaNm3KkCFDjtl+UlISSUlJLF26lK1btwY8L1OmTGHu3Ll4vd5jFseXpUmTJkRGRuL1eo8bB0B4eDiXX345l19+OS6Xi4svvphHH32Ue+65xz+VabNmzZg0aRKTJk3iwIED9O7dm0cffZRhw4aV2e6HH37IuHHjAmYQy8/PJz09vcKPCf78bGzatImTTjrJv/3gwYPl6pk6UkhICJ9++imDBg1i4sSJxMTEcNFFFwF/9pQcHWdxT0J5Hes7YO3atfh8voCE5OjvAChMdkeOHMnIkSPx+XxMmjSJV155hfvvv/+YvZfdu3ene/fu3Hffffz444+cccYZvPzyy0ybNq1Cj0FECqnHQkRqzNFTtUZERNCuXTsKCgr824rnsT/65GT48OF4vV6ef/75gO3PPPMMhmH4T9SGDh0KwIsvvhhwXEVWgy7+BfjoX3xP5GrAffv2xW63M336dGJjY+natStQmHAsX76c7777rly9FeHh4TUynGPx4sWl/iL+xRdfANCxY8cS+3r06MEXX3xBcnIyI0eOJC8vDyh8zaKionjsscdKnV3s6KlTBwwYwLfffstPP/3kfw569epFZGQkTzzxBKGhoZxyyikVfkxWq5VRo0bx0UcfsW7dumPGcfR72eFw0KVLF0zTxO124/V6SzzvTZs2JTExMeD9XlYcRz+3s2bNKvOX/+MZMmQIdrudWbNmBbRb2fdzVFQUCxYsoF27dlxxxRV88803QOGJvdVq9dcGFTv6s3g8Zb1nhw8fzr59+wJmu/J4PMyaNYuIiAjOOussoORrY7FY/DVgZT33mZmZeDyegG3du3fHYrEc9/USkbKpx0JEakyXLl0YOHAgp5xyCrGxsaxatco/HWex4hPCW265haFDh2K1Whk9ejQjR45k0KBB3HvvvWzfvp2ePXvy9ddf88knn3Dbbbf5f/U+5ZRTGDVqFDNnzuTQoUP+6Wb/+OMPoHy/4EdFRXHmmWcyY8YM3G43zZs35+uvv2bbtm018KyULiwsjFNOOYXly5f717CAwl/mc3JyyMnJKVdiccopp/D+++8zZcoUTjvtNCIiIhg5cmSV47v55pvJzc3loosuolOnTrhcLn788Ufef/99Wrdu7a9JONrpp5/OJ598wvDhw7nkkkuYP38+UVFRvPTSS1x11VX07t2b0aNH06RJE1JSUvj8888544wzAhLKAQMGMHv2bAzD8A+Nslqt/OUvf+Grr75i4MCBlV5R+YknnmDx4sX07duXiRMn0qVLF9LS0lizZg2LFi3yD+M699xzSUhI8A/xSk5O5vnnn2fEiBFERkaSnp5OixYtuOSSS+jZsycREREsWrSIlStXHnctk7/+9a+8++67REdH06VLF5YtW8aiRYv8U+JWVJMmTbjzzjt5/PHH+etf/8rw4cP5+eef+fLLL0vUAFWkzeKhYRdeeCHffPMNffr04dJLL2XWrFkYhkHbtm357LPPKrxgYlnv2euuu45XXnmF8ePHs3r1alq3bs2HH37IDz/8wMyZM/09YH/7299IS0vj7LPPpkWLFuzYsYNZs2bRq1cvfz3G0b799lsmT57MpZdeSocOHfB4PLz77rv+ZFNEKikIM1GJSB1QPLXlypUrS91/1llnHXe62WnTppl9+vQxY2JizNDQULNTp07mo48+GjBFqcfjMW+++WazSZMmpmEYAVPPZmVlmbfffruZmJho2u12s3379uaTTz4ZMIWmaZpmTk6OedNNN5mxsbFmRESEeeGFF5obN240gYDpX4unij148GCJx7Nr1y7zoosuMmNiYszo6Gjz0ksvNffs2VPmlLVHtzFu3DgzPDy8XM9TWe666y4TMKdPnx6wvV27diZgbtmyJWB7adN9Zmdnm1deeaUZExPjnzL0yGOPnl6ztKlBS/Pll1+a1157rdmpUyczIiLCdDgcZrt27cybb77Z3L9/f8CxHDHdbLFPPvnEtNls5uWXX256vV5/TEOHDjWjo6PNkJAQs23btub48ePNVatWBdx2/fr1/qlyjzRt2jQTMO+///4S8ZYWg2mWfI+apmnu37/fvOmmm8yWLVuadrvdTEhIMAcPHmy++uqr/mNeeeUV88wzzzQbN25sOp1Os23btuZdd91lZmRkmKZpmgUFBeZdd91l9uzZ04yMjDTDw8PNnj17mi+++OIxn1fTLJyW+JprrjHj4uLMiIgIc+jQoeaGDRtKxFrWZ7K094HX6zUfeughs1mzZmZoaKg5cOBAc926daU+/tKU9fwlJyebcXFxZmxsrLlu3Trz4MGD5qhRo8ywsDCzUaNG5vXXX2+uW7eu1OlmS/t8mGbZ71nTLHxtip8bh8Nhdu/evcR79cMPPzTPPfdcs2nTpqbD4TCTkpLM66+/3ty7d2+Zz9HWrVvNa6+91mzbtq0ZEhJixsbGmoMGDTIXLVp03OdGRMpmmGY1V3uJiNQCv/zyCyeffDL/+c9/GDNmTLDDERERqfdUYyEidV7x2P0jzZw5E4vFUqmiXhEREak41ViISJ03Y8YMVq9ezaBBg7DZbHz55Zd8+eWXXHfddbRs2TLY4YmIiDQIGgolInXewoULeeihh/j999/Jzs4mKSmJq666invvvRebTb+fiIiInAhKLEREREREpMpUYyEiIiIiIlWmxEJERERERKpMg48Bn8/Hnj17iIyMLNdiWiIiIiIiDYFpmmRlZZGYmIjFcuw+CSUWwJ49ezRzjIiIiIhIGXbu3EmLFi2OeYwSCyAyMhIofMKioqKCHI2IiIiISO2QmZlJy5Yt/efLx6LEAvzDn6KiopRYiIiIiIgcpTzlAireFhERERGRKlNiISIiIiIiVabEQkREREREqkyJhYiIiIiIVJkSCxERERERqTIlFiIiIiIiUmVKLEREREREpMqUWIiIiIiISJUpsRARERERkSpTYiEiIiIiIlWmxEJERERERKpMiYWIiIiIiFSZEgsREREREakyJRYiIiIiIlJlSixERERERKTKlFiIiIiIiEiV2YIdgIjIiZCSkkJqamq1thkXF0dSUlK1tikiIlJXKbEQkXovJSWFzp07k5ubW63thoWFkZycrORCREQEJRYi0gCkpqaSm5vLfc+/Tqt2HaulzR2bNzJt8gRSU1OVWIiIiKDEQkQakFbtOtKxR69ghyEiIlIvBbV4e8mSJYwcOZLExEQMw2D+/PllHnvDDTdgGAYzZ84M2J6WlsaYMWOIiooiJiaGCRMmkJ2dXbOBi4iIiIhIgKAmFjk5OfTs2ZMXXnjhmMd9/PHHLF++nMTExBL7xowZw/r161m4cCGfffYZS5Ys4brrrqupkEVEREREpBRBHQo1bNgwhg0bdsxjdu/ezc0338xXX33FiBEjAvYlJyezYMECVq5cyamnngrArFmzGD58OP/6179KTURERERERKT61ep1LHw+H1dddRV33XUXXbt2LbF/2bJlxMTE+JMKgCFDhmCxWFixYsWJDFVEREREpEGr1cXb06dPx2azccstt5S6f9++fTRt2jRgm81mIzY2ln379pXZbkFBAQUFBf7rmZmZ1ROwiIiIiEgDVWt7LFavXs2zzz7LW2+9hWEY1dr2448/TnR0tP/SsmXLam1fRERERKShqbWJxdKlSzlw4ABJSUnYbDZsNhs7duzgjjvuoHXr1gAkJCRw4MCBgNt5PB7S0tJISEgos+177rmHjIwM/2Xnzp01+VBEREREROq9WjsU6qqrrmLIkCEB24YOHcpVV13FNddcA0C/fv1IT09n9erVnHLKKQB8++23+Hw++vbtW2bbTqcTp9NZc8GLiIiIiDQwQU0ssrOz2bx5s//6tm3b+OWXX4iNjSUpKYnGjRsHHG+320lISKBjx8KVczt37sx5553HxIkTefnll3G73UyePJnRo0drRigRERERkRMoqEOhVq1axcknn8zJJ58MwJQpUzj55JN54IEHyt3G7Nmz6dSpE4MHD2b4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R7Ny5UpiYmIC9h04cCA4QdVzL774Ips2beKnn37itNNOA2DYsGF069aNp556iscee6zM24aHh5f6GXjrrbeIiopi5MiR/m39+vWjX79+Acd9//335ObmMmbMmGp6NCIlxYZY2JMLLmcEVpumnRURkZpToaFQb775Zrku1Wn37t2MHTuWxo0bExoaSvfu3Vm1apV/v2maPPDAAzRr1ozQ0FCGDBnCpk2bqjWGE2XLli107dq1RFIB0LRp0+Peftq0aVgsloBhU19++SUDBgwgPDycyMhIRowYwfr16/37P/30UwzDCFhN/aOPPsIwDC6++OKA9jt37szll1/uv15c5zF//ny6deuG0+mka9euLFiwoERsu3fv5tprryU+Pt5/3BtvvFHiuFmzZtG1a1fCwsJo1KgRp556KnPmzPHvz8rK4rbbbqN169Y4nU6aNm3KOeecw5o1a/zH5ObmsmHDhnKtbv7hhx9y2mmn+ZMKgE6dOjF48GA++OCD497+aMWzpl188cWEhIQc89g5c+ZgGAZXXnllhe9HpLyi7BbsFjAtVtr2OTPY4YiISD1Wq5djPXz4MGeccQZ2u50vv/yS33//naeeeopGjRr5j5kxYwbPPfccL7/8MitWrCA8PJyhQ4eSn58fxMgrp1WrVqxevZp169ZV+Lb33XcfDzzwAK+88op/yNS7777LiBEjiIiIYPr06dx///38/vvv9O/fn+3btwPQv39/DMNgyZIl/raWLl2KxWLh+++/9287ePAgGzZs4MwzA09Mvv/+eyZNmsTo0aOZMWMG+fn5jBo1ikOHDvmP2b9/P6effjqLFi1i8uTJPPvss7Rr144JEyYwc+ZM/3GvvfYat9xyC126dGHmzJk89NBD9OrVixUrVviPueGGG3jppZcYNWoUL774InfeeSehoaEkJyf7j/npp5/o3Lkzzz///DGfM5/Px9q1azn11FNL7OvTpw9btmwhKyvrmG0c7b333sPn8x23F8LtdvPBBx/wl7/8hdatW1foPkQqwjAM4oqKuLufe0GQoxERkfqsUitvnyjTp0+nZcuWAb0gbdq08f+3aZrMnDmT++67jwsuKPyD+c477xAfH8/8+fMZPXr0CY+5Ku68806GDRtGr1696NOnDwMGDGDw4MEMGjQIu73sIQx33nknzzzzDG+++aZ/uFp2dja33HILf/vb33j11Vf9x44bN46OHTvy2GOP8eqrrxIbG0uXLl1YunSpf5appUuXMmrUKObOncuGDRvo1KmTP8kYMGBAwH0nJyfz+++/07ZtWwAGDRpEz549+e9//+tv795778Xr9fLbb7/5axZuuOEGrrjiCqZOncr1119PaGgon3/+OV27dmXu3LllPtbPP/+ciRMn8tRTT/m33X333eV+jo+UlpZGQUEBzZo1K7GveNuePXvo2LFjuducPXs2zZo14+yzzz7mcV999RWHDh3SMCg5IRqHWNmb66XroOH4yAh2OCIiUk/V6h6LTz/9lFNPPZVLL72Upk2bcvLJJ/Paa6/592/bto19+/YFFMVGR0fTt29fli1bVma7BQUFZGZmBlxqg3POOYdly5Zx/vnn8+uvvzJjxgyGDh1K8+bN+fTTT0scb5qmvwfgP//5T0ANzMKFC0lPT+eKK64gNTXVf7FarfTt29e/yCEUJgtLly4FCoca/frrr1x33XXExcX5ty9dupSYmBi6desWEMOQIUP8SQVAjx49iIqK8s+qZJomH330ESNHjsQ0zYBYhg4dSkZGhn8YU0xMDLt27WLlypVlPkcxMTGsWLGCPXv2lHnMwIEDMU2TqVOnlnkMQF5eHoB/MoIjFQ9jKj6mPP744w9Wr17N6NGjsViO/dGaM2cOdrudyy67rNzti1RWlN2CxesmNDKaQxx7iJ6IiEhl1erEYuvWrbz00ku0b9+er776ihtvvJFbbrmFt99+G4B9+/YBlFj5Oz4+3r+vNI8//jjR0dH+S8uWLWvuQVTQaaedxrx58zh8+DA//fQT99xzD1lZWVxyySX8/vvvAce+8847vPDCC8yaNYsrrrgiYF9xncnZZ59NkyZNAi5ff/11QDH4gAED2Lt3L5s3b+bHH3/EMAz69esXkHAsXbqUM844o8QJc1JSUonH0KhRIw4fPgwUDqFKT0/n1VdfLRHHNddcA/xZmP73v/+diIgI+vTpQ/v27bnpppv44YcfAtqeMWMG69ato2XLlvTp04epU6eWa2rY0oSGhgKFiebRiofSFR9THrNnzwY4bi9EdnY2n3zyCUOHDj3mrFMi1cUwDBwFhcP69qFpZ0VEpGbU6qFQPp+PU0891T8zz8knn8y6det4+eWXS8xQVRH33HMPU6ZM8V/PzMysVckFgMPh8BcVd+jQgWuuuYa5c+fy4IMP+o8544wz+OWXX3j++ee57LLLiI2N9e/z+XxAYZ1FQkJCifZttj9f+v79+wOwZMkStm7dSu/evQkPD2fAgAE899xzZGdn8/PPP/Poo4+WaMdqtZYaf/HiicVxjB07tszXrEePHkBhcfjGjRv57LPPWLBgAR999BEvvvgiDzzwAA899BAAl112GQMGDODjjz/m66+/5sknn2T69OnMmzePYcOGlfFsli42Nhan08nevXtL7CvelpiYWO725syZQ8eOHTnllFOOedz8+fM1G5SccM78LPLDYjlIKB6fic2iNYhERKR61erEolmzZnTp0iVgW+fOnfnoo48A/CfM+/fvDxgnv3//fnr16lVmu06ns9ThL7VVcXHx0SfA7dq1Y8aMGQwcOJDzzjuPb775hsjISAD/8KSmTZuWWD/haElJSSQlJbF06VK2bt3qr6M488wzmTJlCnPnzsXr9ZYo3C6PJk2aEBkZidfrPW4cUDiF6+WXX87ll1+Oy+Xi4osv5tFHH+Wee+7xD09q1qwZkyZNYtKkSRw4cIDevXvz6KOPVjixsFgsJWYZK7ZixQpOOukk//N5PCtWrGDz5s08/PDDxz129uzZREREcP7551coXpGqsHnySd+3m5iE5mzNdNEhpu58B4qISN1Qq4dCnXHGGWzcuDFg2x9//EGrVq2AwkLuhIQEvvnmG//+zMxMVqxYUWLNgLpg8eLF/l/6j/TFF18AlFpE3KNHD7744guSk5MZOXKkvyZg6NChREVF8dhjj+F2u0vc7uDBgwHXBwwYwLfffstPP/3kTyx69epFZGQkTzzxBKGhocf9Jb40VquVUaNG8dFHH5U629WRcRw5kxQU9tp06dIF0zRxu914vV4yMgILT5s2bUpiYmLAcKaKTDd7ySWXsHLlyoDkYuPGjXz77bdceumlAcdu2LCBlJSUUtspnhL3eFPHHjx4kEWLFnHRRRcRFhZ23PhEqosBrFtUWKu1Id0V3GBERKReqtU9Frfffjt/+ctfeOyxx7jsssv46aefePXVV/2zHBmGwW233ca0adNo3749bdq04f777ycxMZELL7wwuMFXws0330xubi4XXXQRnTp1wuVy8eOPP/L+++/TunVrf03C0U4//XQ++eQThg8fziWXXML8+fOJioripZde4qqrrqJ3796MHj2aJk2akJKSwuef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EBttowqnh/7pgBbMExGRilNiUYsNHjyY//73v2zevJnzzjuPzMxMANq2bUtGRgZr1671H7t3714+/vjjcrcdFhYGUCJBadasGb169eLtt98O2Ldu3Tq+/vprhg8fDhT2jhx90t60aVMSExMpKCgo834PHToUcN1isfhnozryduWdbvbIhOtIr7/+emFR6hGzU6WmprJhwwZyc3OP2eb777/PypUrue2220qtn5gzZw6Av5ZDpL7oG1/4vfBbWj45bk09KyIiFaNZoWq5iy66iNdee41rr72W888/nwULFjB69Gj+/ve/c9FFF3HLLbeQm5vLSy+9RIcOHQLWkDiW0NBQunTpwvvvv0+HDh2IjY2lW7dudOvWjSeffJJhw4bRr18/JkyY4J9uNjo62r/WRVZWFi1atOCSSy6hZ8+eREREsGjRIlauXBkwS9TR/va3v5GWlsbZZ59NixYt2LFjB7NmzaJXr1507tzZf1x5p5t99NFH+eGHHzjvvPNISkoiLS2Njz76iJUrV3LzzTfTrl07/7HPP/88Dz30EIsXL/avNr5kyRIefvhhzj33XBo3bszy5ct58803Oe+88wKmvy3m9Xp5//33Of3002nbtm25nmuRuqJluI1mYTb25npYfTCPMxPDj38jERGRIkos6oBrrrmGtLQ07rzzTi699FI+/vhjPv74Y6ZMmcLdd99NmzZtePzxx9m0aVO5EwuAf//739x8883cfvvtuFwuHnzwQbp168aQIUNYsGABDz74IA888AB2u52zzjqL6dOn+wvBw8LCmDRpEl9//TXz5s3D5/PRrl07XnzxRW688cYy73Ps2LG8+uqrvPjii6Snp5OQkMDll1/O1KlTKzW70ogRI9iyZQtvvPEGBw8eJCQkhB49evDmm2+Wq26jefPmWK1WnnzySbKysmjTpg3Tpk1jypQp2GwlPx6LFi1i//793HvvvRWOVaS2MwyDvk1Dmb89izWp+ZweH4bDqqlnRUSkfJRY1CLjx49n/Pjxpe674447uOOOO/zXzznnHH777bcSxx25ejaAaZpl3l+/fv1YtWpVqfsGDx7s7zUojcPhYMaMGcyYMaPMYwDeeuutgOujRo1i1KhRx7wNlH9hvHPOOYdzzjmnXMdOnTq1xPPTtm1bvvrqq3LdHmDo0KHHfE5F6roOMQ5iHBbSXT7WpuVzqhbM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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "24.Implement the Pearson and Spearman correlation coefficients for a dataset.\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from scipy.stats import pearsonr, spearmanr\n",
        "\n",
        "# Step 1: Sample dataset\n",
        "np.random.seed(42)\n",
        "x = np.random.randint(10, 100, 15)\n",
        "y = x + np.random.normal(0, 10, 15)  # Add noise for more realistic correlation\n",
        "\n",
        "# Step 2: Convert to DataFrame\n",
        "df = pd.DataFrame({'X': x, 'Y': y})\n",
        "\n",
        "# Step 3: Pearson Correlation\n",
        "pearson_corr, pearson_p = pearsonr(df['X'], df['Y'])\n",
        "\n",
        "# Step 4: Spearman Correlation\n",
        "spearman_corr, spearman_p = spearmanr(df['X'], df['Y'])\n",
        "\n",
        "# Step 5: Output\n",
        "print(\"📊 Dataset:\\n\", df)\n",
        "print(\"\\n📈 Pearson Correlation Coefficient:\")\n",
        "print(f\"Correlation = {pearson_corr:.2f}, p-value = {pearson_p:.4f}\")\n",
        "\n",
        "print(\"\\n📉 Spearman Correlation Coefficient:\")\n",
        "print(f\"Correlation = {spearman_corr:.2f}, p-value = {spearman_p:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NvaoVXbHUsml",
        "outputId": "9922e745-d915-4ca7-c2d6-cd4606a0b3dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📊 Dataset:\n",
            "      X           Y\n",
            "0   61   63.330952\n",
            "1   24   25.179946\n",
            "2   81   95.623781\n",
            "3   70   85.387150\n",
            "4   30    5.608942\n",
            "5   92   98.034412\n",
            "6   96   93.489560\n",
            "7   84   82.361329\n",
            "8   84   69.236703\n",
            "9   97  111.869810\n",
            "10  33   32.755448\n",
            "11  12   15.555513\n",
            "12  31   35.170111\n",
            "13  62   70.324619\n",
            "14  11    8.066009\n",
            "\n",
            "📈 Pearson Correlation Coefficient:\n",
            "Correlation = 0.96, p-value = 0.0000\n",
            "\n",
            "📉 Spearman Correlation Coefficient:\n",
            "Correlation = 0.92, p-value = 0.0000\n"
          ]
        }
      ]
    }
  ]
}