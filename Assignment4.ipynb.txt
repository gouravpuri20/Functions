{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "HPGX0hK-DkNC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.What is Object-Oriented Programming (OOP)?\n",
        "\n",
        "• Object oriented programming (OOP) is a programming paradigm that uses \"objects\" and their interactions to design applications and computer programs.\n",
        "\n",
        "2.What is a class in OOP?\n",
        "\n",
        "• In Object-Oriented Programming (OOP), a class is a user-defined data type that serves as a blueprint for creating objects.\n",
        "\n",
        "3.What is an object in OOP?\n",
        "\n",
        "•In Object Oriented Programming (OOP), an object is a fundamental unit that represents a real-world entity or concept.\n",
        "\n",
        "4.What is the difference between abstraction and encapsulation?\n",
        "\n",
        "•Abstraction focuses on hiding complex implementation details and showing only the essential features to the user, simplifying interactions. Encapsulation bundles data and methods within a single unit, like a class, and controls access to protect the data. In essence, abstraction simplifies the user's view, while encapsulation ensures data is well-organized and secure.\n",
        "\n",
        "5.What are dunder methods in Python?\n",
        "\n",
        "•Dunder methods, also known as magic methods, are special methods in Python that begin and end with double underscores (e.g., __init__, __str__, __len__). They allow classes to define how they behave with built-in operations and functions.\n",
        "These methods enable operator overloading, customization of object initialization, string representation, and more. For instance, __init__ initializes an object, __str__ provides a string representation, and __add__ defines addition behavior. Dunder methods facilitate seamless integration between custom classes and Python's core functionality.\n",
        "\n",
        "6.Explain the concept of inheritance in OOP?\n",
        "\n",
        "•Inheritance in Object-Oriented Programming (OOP) is a mechanism where a new class (child class or derived class) inherits attributes and methods from an existing class (parent class or base class). This allows for code reusability and promotes a hierarchical class structure. Essentially, a child class \"is a\" version of its parent class.\n",
        "Key Concepts:\n",
        "Parent Class (Base Class/Superclass): The class from which attributes and methods are inherited.\n",
        "Child Class (Derived Class/Subclass): The class that inherits from a parent class.\n",
        "\n",
        "7.What is polymorphism in OOP?\n",
        "\n",
        "•AI Overview Polymorphism, meaning \"many forms,\" is a core concept in objectoriented programming (OOP) that allows objects of different classes to be treated as objects of a common superclass or interface. It enables a single method or interface to take on multiple forms, enhancing code flexibility and reusability.\n",
        "\n",
        "8.How is encapsulation achieved in Python?\n",
        "\n",
        "•Encapsulation in Python is achieved by restricting access to attributes and methods within a class, effectively hiding the internal implementation details and exposing only a public interface. This is primarily done through naming conventions, as Python doesn't enforce access modifiers like private or protected in the same way as some other languages.\n",
        "\n",
        "9.What is a constructor in Python?\n",
        "\n",
        "•A constructor in Python is a special method within a class that initializes the attributes of an object when the object is created. It is defined using the __init__ method. When a new instance of a class is created, the __init__ method is automatically called, allowing you to set up the initial state of the object.\n",
        "\n",
        "10.What are class and static methods in Python?\n",
        "\n",
        "•Class methods and static methods are special types of methods in Python classes that differ from regular instance methods in how they are called and how they interact with the class and its instances.\n",
        "Class methods: are bound to the class and not the instance of the class. They receive the class itself as the first argument, conventionally named cls. Class methods can access and modify class-level attributes. They are defined using the @classmethod decorator.\n",
        "Python\n",
        "    class MyClass:\n",
        "        class_variable = \"Class Variable\"\n",
        "    \n",
        "        @classmethod\n",
        "        def class_method(cls):\n",
        "            print(f\"Class variable: {cls.class_variable}\")\n",
        "    \n",
        "    MyClass.class_method()  # Output: Class variable: Class Variable\n",
        "Static methods: are not bound to the class or the instance. They are essentially regular functions that are placed within the class namespace. They do not receive the self or cls argument. Static methods cannot access or modify class or instance attributes. They are defined using the @staticmethod decorator.\n",
        "Python\n",
        "    class MyClass:\n",
        "        @staticmethod\n",
        "        def static_method():\n",
        "            print(\"Static method called\")\n",
        "    \n",
        "    MyClass.static_method()  # Output\n",
        "\n",
        "11.What is method overloading in Python?\n",
        "\n",
        "•Method overloading in Python refers to the possibility of defining multiple methods with the same name within a class, but with different parameters. However, Python does not support traditional method overloading like some other languages (e.g., Java, C++). Instead, it handles this concept through default arguments, variable-length arguments, or conditional logic within a single method definition. When multiple methods with the same name are defined, Python only retains the latest definition. This means that if you define two methods with the same name, the first one will be overwritten by the second. To achieve the effect of method overloading, you can use default argument values or variable-length argument lists (*args and **kwargs).\n",
        "\n",
        "12.What is method overriding in OOP?\n",
        "\n",
        "•Method overriding in object-oriented programming (OOP) is a mechanism where a subclass provides a specific implementation for a method that is already defined in its superclass. This allows the subclass to modify or extend the behavior of the inherited method, while still maintaining the same method name and signature.\n",
        "\n",
        "13.What is a property decorator in Python?\n",
        "\n",
        "•In Python, a property decorator is a built-in feature that allows methods to be accessed like attributes. It provides a way to manage the access and modification of class attributes, enabling the implementation of getters, setters, and deleters in a more Pythonic and intuitive manner.The @property decorator is used to define a method as a property, which means it can be accessed like a regular attribute without using parentheses. This allows for more readable and natural-looking code. When a property is accessed, the getter method is automatically called, and when it is assigned a value, the setter method is called. Additionally, a deleter method can be defined to handle the deletion of the property.\n",
        "\n",
        "14.Why is polymorphism important in OOP?\n",
        "\n",
        "•Polymorphism is crucial in Object-Oriented Programming (OOP) because it enables code reuse, flexibility, and extensibility. It allows objects of different classes to be treated as objects of a common type, simplifying code and making it easier to adapt to new situations.\n",
        "Here's why polymorphism is important:\n",
        "Code Reusability:\n",
        "Polymorphism allows you to use the same method name for different classes, reducing redundancy and promoting code reuse.\n",
        "Flexibility and Adaptability:\n",
        "It enables you to write generic code that can work with multiple types of objects without needing to know their specific classes, making your code more flexible and adaptable to changing requirements.\n",
        "Extensibility:\n",
        "Polymorphism makes it easy to add new classes to your code without having to modify existing code, as long as the new classes adhere to the same interface.\n",
        "Improved Readability:\n",
        "By using a single method name for different actions, polymorphism can improve the readability and maintainability of your code.\n",
        "Dynamic Method Dispatch:\n",
        "Polymorphism allows for dynamic method dispatch, where the specific method to be called is determined at runtime based on the object's actual type, according to PW Skills.\n",
        "Abstraction:\n",
        "Polymorphism allows you to work at a higher level of abstraction, dealing with objects of a common type without needing to know their specific implementation details.\n",
        "Reduced Conditional Statements:\n",
        "Polymorphism can replace multiple conditional statements (like if-else blocks) with a single method call, simplifying the code.\n",
        "In essence, polymorphism is a core principle of OOP that allows you to write more efficient, flexible, and maintainable code.\n",
        "\n",
        "15.What is an abstract class in Python?\n",
        "\n",
        "•An abstract class in Python is a class that cannot be instantiated directly and serves as a blueprint for other classes. It defines methods, known as abstract methods, that must be implemented by any concrete (non-abstract) class that inherits from it. Abstract classes are created using the abc module, specifically the ABC class and the @abstract method decorator.Abstract classes enforce a specific structure and interface for their subclasses, ensuring that they provide implementations for essential methods. This promotes consistency and code reusability, especially in large and complex projects.\n",
        "\n",
        "16.What are the advantages of OOP?\n",
        "•Object-\n",
        "\n",
        "oriented programming (OOP) offers numerous advantages over other programming paradigms, including enhanced code organization, reusability, and maintainability. It facilitates modularity, making code easier to understand, debug, and modify. OOP also promotes code reuse through inheritance and polymorphism, leading to increased efficiency and productivity\n",
        "\n",
        "17.What is the difference between a class variable and an instance variable?\n",
        "\n",
        "•Class Variable (Static Variable):\n",
        "Shared across instances:\n",
        "A single copy of a class variable exists for the entire class, and all instances of that class can access and modify it.\n",
        "Declared with the static keyword:\n",
        "In many programming languages, including Java and C++, you declare a class variable using the static keyword.\n",
        "Purpose:\n",
        "Class variables are often used to store data that is common to all instances, such as a counter for the number of objects created or a constant value used across the class.\n",
        "Example:\n",
        "Imagine a class Person with a class variable totalPeople. Each time a new Person object is created, the totalPeople counter is incremented.\n",
        "Instance Variable:\n",
        "Unique to each instance:\n",
        "Each instance of a class has its own independent copy of an instance variable.\n",
        "Declared without the static keyword:\n",
        "In Java and C++, instance variables are typically declared without the static keyword.\n",
        "Purpose:\n",
        "Instance variables store data that is specific to each individual object, such as a Person's name, age, or addres.\n",
        "\n",
        "18.What is multiple inheritance in Python?\n",
        "\n",
        "•Multiple inheritance in Python is a feature that allows a class to inherit attributes and methods from more than one parent class. This enables a class to combine functionalities from different sources, creating a more versatile and reusable code structure.\n",
        "\n",
        "19.Explain the purpose of ‘’__str__’ and ‘__repr__’ ‘ methods in Python?\n",
        "\n",
        "•In Python, __str__ and __repr__ are special methods used to define how objects are represented as strings. They are essential for providing informative and user-friendly output when working with custom classes.\n",
        "__str__: This method aims to return a human-readable, informal string representation of an object. It is called by the built-in str() function and implicitly used by the print() function. The output of __str__ should be easily understandable for end-users.\n",
        "__repr__: This method provides a more detailed and unambiguous string representation of an object, primarily intended for developers and debugging purposes. It is called by the built-in repr() function and in the interactive interpreter. Ideally, the string returned by __repr__ should be a valid Python expression that can recreate the object. If __str__ is not defined, Python will fall back to using __repr__ when str() or print() is called.\n",
        "It's considered good practice to implement both __str__ and __repr__ in custom classes to provide clear and useful string representations for different contexts.\n",
        "\n",
        "20.What is the significance of the ‘super()’ function in Python?\n",
        "\n",
        "•The super() function in Python is used to call methods from a parent class in a subclass. It provides a way to access and utilize inherited methods, promoting code reusability and simplifying the implementation of inheritance hierarchies.\n",
        "The common use case of super() is within the __init__ method of a subclass to ensure that the parent class's initialization logic is executed. It can also be used to call other methods of the parent class, allowing for extending or modifying the parent class's behavior in the subclass.\n",
        "\n",
        "21.What is the significance of the __del__ method in Python?\n",
        "\n",
        "•The __del__ method in Python, also known as a destructor, is called when an object is garbage collected, after all references to it have been deleted. It provides an opportunity to clean up resources that the object might have been using, such as closing files or releasing external connections. However, relying on __del__ for critical cleanup tasks is generally discouraged due to the uncertainty of when it will be called.\n",
        "The __del__ method is invoked automatically by Python's garbage collector when an object is no longer in use and is about to be destroyed. It is not guaranteed to be called immediately after an object's last reference is removed, nor is it guaranteed to be called at all if there are still references to the object when the interpreter exits.\n",
        "\n",
        "22.What is the difference between @static method and @classmethod in Python?\n",
        "\n",
        "•The key difference between @staticmethod and @classmethod lies in their relationship to the class and its instances:\n",
        "@staticmethod:\n",
        "It is a function that belongs to a class but doesn't have access to the class itself or its instances.\n",
        "It's essentially a regular function placed inside a class for organizational purposes.\n",
        "It does not take self or cls as its first argument.\n",
        "It cannot access or modify class-specific or instance-specific attributes.\n",
        "It is called on the class itself, not an instance of the class.\n",
        "It is useful for utility functions that are related to the class but don't need to interact with its state.\n",
        "@classmethod:\n",
        "It is a method that is bound to the class, not an instance of the class.\n",
        "It receives the class itself as the first argument, conventionally named cls.\n",
        "It can access and modify class-level attributes.\n",
        "It can be called on the class itself or an instance of the class.\n",
        "It is useful for creating factory methods or methods that need to work with the class as a whole.\n",
        "\n",
        "23.How does polymorphism work in Python with inheritance?\n",
        "\n",
        "•Polymorphism, meaning \"many forms,\" enables objects of different classes to respond to the same method call in their own specific ways. When combined with inheritance in Python, it allows a child class to redefine a method inherited from its parent class. This is known as method overriding.When a method is called on an object, Python checks the object's class for a matching method. If it's not found there, it searches the parent class, and so on up the inheritance hierarchy. If a child class has overridden a method, that version of the method is executed instead of the parent's version. This mechanism allows for specialized behavior for different classes while maintaining a common interface.\n",
        "\n",
        "24.What is method chaining in Python OOP?\n",
        "\n",
        "•Method chaining in Python is a programming technique used in object-oriented programming where multiple methods are called sequentially on the same object in a single statement. This is achieved by having each method return the object instance (self) after it completes its operation. It enhances code readability and conciseness by eliminating the need for intermediate variables.\n",
        "To implement method chaining, each method in the class should return self. This allows the subsequent method to be called immediately after the previous one, creating a chain of method calls.\n",
        "\n",
        "25.What is the purpose of the __call__ method in Python?\n",
        "\n",
        "•The __call__ method in Python enables instances of a class to be called as if they were functions. When a class defines the __call__ method, it allows its objects to be invoked using parentheses, just like regular functions. This mechanism is useful for creating objects that encapsulate specific behaviors or operations, providing a more object-oriented approach compared to using standalone functions."
      ],
      "metadata": {
        "id": "W7t5dfZZeSsu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "1. Create a parent class Animal with a method speak() that prints a generic message. Create a child class Dog\n",
        "that overrides the speak() method to print \"Bark!\".\n",
        "class Animal:\n",
        "    def speak(self):\n",
        "        print(\"This is a generic animal sound\")\n",
        "\n",
        "class Dog(Animal):\n",
        "    def speak(self):\n",
        "        print(\"Bark!\")\n",
        "\n",
        "# Testing the classes\n",
        "animal = Animal()\n",
        "dog = Dog()\n",
        "\n",
        "print(\"Animal speaks:\")\n",
        "animal.speak()  # Output: This is a generic animal sound\n",
        "\n",
        "print(\"\\nDog speaks:\")\n",
        "dog.speak()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OD0z-OI2ndkq",
        "outputId": "49dbfdf0-49b5-43e9-ed03-e7f1b280359e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Animal speaks:\n",
            "This is a generic animal sound\n",
            "\n",
            "Dog speaks:\n",
            "Bark!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "2. Write a program to create an abstract class Shape with a method area(). Derive classes Circle and Rectangle\n",
        "from it and implement the area() method in both.\n",
        "from abc import ABC, abstractmethod\n",
        "import math\n",
        "\n",
        "class Shape(ABC):\n",
        "    @abstractmethod\n",
        "    def area(self):\n",
        "        pass\n",
        "\n",
        "class Circle(Shape):\n",
        "    def __init__(self, radius):\n",
        "        self.radius = radius\n",
        "\n",
        "    def area(self):\n",
        "        return math.pi * self.radius ** 2\n",
        "\n",
        "class Rectangle(Shape):\n",
        "    def __init__(self, length, width):\n",
        "        self.length = length\n",
        "        self.width = width\n",
        "\n",
        "    def area(self):\n",
        "        return self.length * self.width\n",
        "\n",
        "# Testing the classes\n",
        "circle = Circle(5)\n",
        "rectangle = Rectangle(4, 6)\n",
        "\n",
        "print(\"Circle area:\", circle.area())\n",
        "print(\"Rectangle area:\", rectangle.area())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GYSQptHWCwCP",
        "outputId": "f5afcb5b-0a61-4c73-f493-e37703045297"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Circle area: 78.53981633974483\n",
            "Rectangle area: 24\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "3. Implement a multi-level inheritance scenario where a class Vehicle has an attribute type. Derive a class Car\n",
        "and further derive a class ElectricCar that adds a battery attribute.\n",
        "# Base class\n",
        "class Vehicle:\n",
        "    def __init__(self, vehicle_type):\n",
        "        self.vehicle_type = vehicle_type\n",
        "\n",
        "# Derived class\n",
        "class Car(Vehicle):\n",
        "    def __init__(self, vehicle_type, brand):\n",
        "        super().__init__(vehicle_type)\n",
        "        self.brand = brand\n",
        "\n",
        "# Further derived class\n",
        "class ElectricCar(Car):\n",
        "    def __init__(self, vehicle_type, brand, battery_capacity):\n",
        "        super().__init__(vehicle_type, brand)\n",
        "        self.battery_capacity = battery_capacity\n",
        "\n",
        "# Testing the classes\n",
        "electric_car = ElectricCar(\"Electric\", \"Tesla\", \"100 kWh\")\n",
        "print(\"Vehicle Type:\", electric_car.vehicle_type)\n",
        "print(\"Brand:\", electric_car.brand)\n",
        "print(\"Battery Capacity:\", electric_car.battery_capacity)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K-9ngXDNDCh2",
        "outputId": "aa11499e-57fb-449f-a365-0ca804e9be08"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Vehicle Type: Electric\n",
            "Brand: Tesla\n",
            "Battery Capacity: 100 kWh\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "4. Demonstrate polymorphism by creating a base class Bird with a method fly(). Create two derived classes\n",
        "Sparrow and Penguin that override the fly() method.\n",
        "# Base class\n",
        "class Bird:\n",
        "    def __init__(self, name):\n",
        "        self.name = name\n",
        "\n",
        "    def fly(self):\n",
        "        print(f\"The bird {self.name} is flying in a generic way\")\n",
        "\n",
        "# Derived class 1\n",
        "class Sparrow(Bird):\n",
        "    def fly(self):\n",
        "        print(f\"The sparrow {self.name} is flying quickly and nimbly through the air\")\n",
        "\n",
        "# Derived class 2\n",
        "class Penguin(Bird):\n",
        "    def fly(self):\n",
        "        print(f\"The penguin {self.name} cannot fly, but can swim excellently\")\n",
        "\n",
        "# Testing polymorphism\n",
        "def let_bird_fly(bird):\n",
        "    bird.fly()  # This will call the appropriate fly() method based on the object's type\n",
        "\n",
        "# Create instances of different birds\n",
        "generic_bird = Bird(\"Birdy\")\n",
        "sparrow = Sparrow(\"Jack\")\n",
        "penguin = Penguin(\"Rico\")\n",
        "\n",
        "# Demonstrate polymorphism\n",
        "print(\"Demonstrating polymorphism:\")\n",
        "let_bird_fly(generic_bird)\n",
        "let_bird_fly(sparrow)\n",
        "let_bird_fly(penguin)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RfPe5sBeDdCS",
        "outputId": "9a6270c1-c2eb-4542-91ad-6e98a12e9a3f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Demonstrating polymorphism:\n",
            "The bird Birdy is flying in a generic way\n",
            "The sparrow Jack is flying quickly and nimbly through the air\n",
            "The penguin Rico cannot fly, but can swim excellently\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "5. Write a program to demonstrate encapsulation by creating a class BankAccount with private attributes\n",
        "balance and methods to deposit, withdraw, and check balance.\n",
        "\n",
        "class BankAccount:\n",
        "    def __init__(self, account_holder, initial_balance=0):\n",
        "        self.__account_holder = account_holder  # Private attribute\n",
        "        self.__balance = initial_balance  # Private attribute\n",
        "        print(f\"Account created for {account_holder} with initial balance: ${initial_balance}\")\n",
        "\n",
        "    def deposit(self, amount):\n",
        "        if amount > 0:\n",
        "            self.__balance += amount\n",
        "            print(f\"${amount} deposited successfully\")\n",
        "            return True\n",
        "        else:\n",
        "            print(\"Deposit amount must be positive\")\n",
        "            return False\n",
        "\n",
        "    def withdraw(self, amount):\n",
        "        if amount > 0:\n",
        "            if amount <= self.__balance:\n",
        "                self.__balance -= amount\n",
        "                print(f\"${amount} withdrawn successfully\")\n",
        "                return True\n",
        "            else:\n",
        "                print(\"Insufficient funds\")\n",
        "                return False\n",
        "        else:\n",
        "            print(\"Withdrawal amount must be positive\")\n",
        "            return False\n",
        "\n",
        "    def check_balance(self):\n",
        "        print(f\"Current balance: ${self.__balance}\")\n",
        "        return self.__balance\n",
        "\n",
        "    # This method demonstrates that direct access to __balance is not possible\n",
        "    def demonstrate_encapsulation(self):\n",
        "        print(\"Demonstrating encapsulation:\")\n",
        "        print(\"Private attributes cannot be accessed directly from outside the class\")\n",
        "        print(\"They can only be accessed through defined methods\")\n",
        "\n",
        "# Testing the BankAccount class\n",
        "if __name__ == \"__main__\":\n",
        "    # Create a new account\n",
        "    account = BankAccount(\"John Doe\", 1000)\n",
        "\n",
        "    # Try operations\n",
        "    account.deposit(500)\n",
        "    account.withdraw(200)\n",
        "    account.check_balance()\n",
        "\n",
        "    # Try to access private attribute directly (will not work as expected)\n",
        "    try:\n",
        "        print(account.__balance)  # This will raise an AttributeError\n",
        "    except AttributeError as e:\n",
        "        print(f\"Error: {e}\")\n",
        "        print(\"Cannot access private attribute directly\")\n",
        "\n",
        "    # Name mangling in Python: private attributes can still be accessed with _ClassName__attribute\n",
        "    # (This is just to demonstrate how Python implements private attributes)\n",
        "    print(f\"Accessing through name mangling: ${account._BankAccount__balance}\")\n",
        "\n",
        "    # Show encapsulation benefits\n",
        "    account.demonstrate_encapsulation()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dYNLF6aCE8mI",
        "outputId": "1eaa12ac-f341-40ca-8126-35d620161de7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Account created for John Doe with initial balance: $1000\n",
            "$500 deposited successfully\n",
            "$200 withdrawn successfully\n",
            "Current balance: $1300\n",
            "Error: 'BankAccount' object has no attribute '__balance'\n",
            "Cannot access private attribute directly\n",
            "Accessing through name mangling: $1300\n",
            "Demonstrating encapsulation:\n",
            "Private attributes cannot be accessed directly from outside the class\n",
            "They can only be accessed through defined methods\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "6. Demonstrate runtime polymorphism using a method play() in a base class Instrument. Derive classes Guitar\n",
        "and Piano that implement their own version of play().\n",
        "\n",
        "class Instrument:\n",
        "    def __init__(self, name):\n",
        "        self.name = name\n",
        "\n",
        "    def play(self):\n",
        "        print(f\"Playing the {self.name}\")\n",
        "\n",
        "class Guitar(Instrument):\n",
        "    def __init__(self, guitar_type=\"Acoustic\"):\n",
        "        super().__init__(\"Guitar\")\n",
        "        self.guitar_type = guitar_type\n",
        "\n",
        "    def play(self):\n",
        "        print(f\"Strumming the {self.guitar_type} {self.name}\")\n",
        "\n",
        "class Piano(Instrument):\n",
        "    def __init__(self, piano_type=\"Grand\"):\n",
        "        super().__init__(\"Piano\")\n",
        "        self.piano_type = piano_type\n",
        "\n",
        "    def play(self):\n",
        "        print(f\"Playing keys on the {self.piano_type} {self.name}\")\n",
        "\n",
        "# Demonstrate runtime polymorphism\n",
        "def perform_music(instrument):\n",
        "    # This function works with any class that has a play() method\n",
        "    # Runtime polymorphism occurs here as the correct play() method is called\n",
        "    # based on the actual object type at runtime\n",
        "    instrument.play()\n",
        "\n",
        "# Create instances of different instruments\n",
        "guitar = Guitar(\"Electric\")\n",
        "piano = Piano(\"Upright\")\n",
        "ukulele = Instrument(\"Ukulele\")\n",
        "\n",
        "# Store instruments in a list to demonstrate polymorphic behavior\n",
        "instruments = [guitar, piano, ukulele]\n",
        "\n",
        "# Call the same method on different objects and see different behaviors\n",
        "print(\"Demonstrating runtime polymorphism:\")\n",
        "for instrument in instruments:\n",
        "    perform_music(instrument)  # The correct version of play() is called based on the object type"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DgDq1IGnFYsh",
        "outputId": "3c6431d4-2d88-4dbc-b8bc-7babda16aaee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Demonstrating runtime polymorphism:\n",
            "Strumming the Electric Guitar\n",
            "Playing keys on the Upright Piano\n",
            "Playing the Ukulele\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "7. Create a class MathOperations with a class method add_numbers() to add two numbers and a static\n",
        "method subtract_numbers() to subtract two numbers.\n",
        "class MathOperations:\n",
        "    @classmethod\n",
        "    def add_numbers(cls, a, b):\n",
        "        \"\"\"Class method to add two numbers\"\"\"\n",
        "        return a + b\n",
        "\n",
        "    @staticmethod\n",
        "    def subtract_numbers(a, b):\n",
        "        \"\"\"Static method to subtract two numbers\"\"\"\n",
        "        return a - b\n",
        "\n",
        "# Testing the class\n",
        "# Class method is called on the class\n",
        "print(f\"Addition using class method: {MathOperations.add_numbers(10, 5)}\")\n",
        "\n",
        "# Static method is called on the class\n",
        "print(f\"Subtraction using static method: {MathOperations.subtract_numbers(10, 5)}\")\n",
        "\n",
        "# Creating an instance and calling methods on it\n",
        "math_ops = MathOperations()\n",
        "print(f\"Addition using instance: {math_ops.add_numbers(20, 10)}\")\n",
        "print(f\"Subtraction using instance: {math_ops.subtract_numbers(20, 10)}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2xkI4jhPFthL",
        "outputId": "98c0d916-e091-426e-bca3-beae73be61ef"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Addition using class method: 15\n",
            "Subtraction using static method: 5\n",
            "Addition using instance: 30\n",
            "Subtraction using instance: 10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "8. Implement a class Person with a class method to count the total number of persons created.\n",
        "\n",
        "class Person:\n",
        "    # Class variable to keep track of the count of persons\n",
        "    count = 0\n",
        "\n",
        "    def __init__(self, name):\n",
        "        \"\"\"Initialize a new Person with a name\"\"\"\n",
        "        self.name = name\n",
        "        # Increment count when a new instance is created\n",
        "        Person.count += 1\n",
        "\n",
        "    @classmethod\n",
        "    def get_count(cls):\n",
        "        \"\"\"Class method to return the total number of persons created\"\"\"\n",
        "        return cls.count\n",
        "\n",
        "# Testing the Person class\n",
        "print(\"Initial count:\", Person.get_count())\n",
        "\n",
        "# Create some person instances\n",
        "person1 = Person(\"Alice\")\n",
        "person2 = Person(\"Bob\")\n",
        "person3 = Person(\"Charlie\")\n",
        "\n",
        "# Check the count after creating instances\n",
        "print(\"Count after creating 3 persons:\", Person.get_count())\n",
        "\n",
        "# Create more instances\n",
        "person4 = Person(\"David\")\n",
        "person5 = Person(\"Eve\")\n",
        "\n",
        "# Check the final count\n",
        "print(\"Final count:\", Person.get_count())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e8Apgiw7GwL2",
        "outputId": "f256eb23-d603-4cf9-9bb2-d83511e363a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Initial count: 0\n",
            "Count after creating 3 persons: 3\n",
            "Final count: 5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "9. Write a class Fraction with attributes numerator and denominator. Override the str method to display the\n",
        "fraction as \"numerator/denominator\". Fraction:\n",
        "    def __init__(self, numerator, denominator):\n",
        "        \"\"\"Initialize a fraction with numerator and denominator\"\"\"\n",
        "        self.numerator = numerator\n",
        "        if denominator == 0:\n",
        "            raise ValueError(\"Denominator cannot be zero\")\n",
        "        self.denominator = denominator\n",
        "\n",
        "    def __str__(self):\n",
        "        \"\"\"Override the str method to display the fraction as 'numerator/denominator'\"\"\"\n",
        "        return f\"{self.numerator}/{self.denominator}\"\n",
        "\n",
        "# Testing the Fraction class\n",
        "f1 = Fraction(1, 2)\n",
        "f2 = Fraction(3, 4)\n",
        "f3 = Fraction(5, 6)\n",
        "\n",
        "print(f1)  # Should display: 1/2\n",
        "print(f2)  # Should display: 3/4\n",
        "print(f3)  # Should display: 5/6\n",
        "\n",
        "# You can also create improper fractions\n",
        "f4 = Fraction(5, 3)\n",
        "print(f4)  # Should display: 5/3\n",
        "\n",
        "# Or negative fractions\n",
        "f5 = Fraction(-1, 4)\n",
        "print(f5)  # Should display: -1/4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t5bjd2mXHMUo",
        "outputId": "ede86f09-cbe9-4b1a-aee4-53c97b96e893"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/2\n",
            "3/4\n",
            "5/6\n",
            "5/3\n",
            "-1/4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "10. Demonstrate operator overloading by creating a class Vector and overriding the add method to add two\n",
        "vectors.\n",
        "class Vector:\n",
        "    def __init__(self, components):\n",
        "        \"\"\"Initialize a vector with a list of components\"\"\"\n",
        "        self.components = components\n",
        "\n",
        "    def __add__(self, other):\n",
        "        \"\"\"Override the + operator to add two vectors\"\"\"\n",
        "        if len(self.components) != len(other.components):\n",
        "            raise ValueError(\"Vectors must have the same dimensions\")\n",
        "\n",
        "        # Add corresponding components\n",
        "        result = [self.components[i] + other.components[i] for i in range(len(self.components))]\n",
        "        return Vector(result)\n",
        "\n",
        "    def __str__(self):\n",
        "        \"\"\"String representation of the vector\"\"\"\n",
        "        return f\"Vector({self.components})\"\n",
        "\n",
        "# Testing the Vector class\n",
        "v1 = Vector([1, 2, 3])\n",
        "v2 = Vector([4, 5, 6])\n",
        "\n",
        "# Adding vectors using the + operator\n",
        "v3 = v1 + v2  # This calls v1.__add__(v2)\n",
        "\n",
        "print(v1)  # Should display: Vector([1, 2, 3])\n",
        "print(v2)  # Should display: Vector([4, 5, 6])\n",
        "print(v3)  # Should display: Vector([5, 7, 9])\n",
        "\n",
        "# Test with 2D vectors\n",
        "v4 = Vector([10, 20])\n",
        "v5 = Vector([30, 40])\n",
        "v6 = v4 + v5\n",
        "print(v6)  # Should display: Vector([40, 60])\n",
        "\n",
        "# Try with vectors of different dimensions\n",
        "try:\n",
        "    v7 = v1 + v4  # This should raise an error\n",
        "except ValueError as e:\n",
        "    print(f\"Error: {e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SwTho2fDHsFN",
        "outputId": "74bc560f-2545-45e3-8899-3501472abd2d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Vector([1, 2, 3])\n",
            "Vector([4, 5, 6])\n",
            "Vector([5, 7, 9])\n",
            "Vector([40, 60])\n",
            "Error: Vectors must have the same dimensions\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "11. Create a class Person with attributes name and age. Add a method greet() that prints \"Hello, my name is\n",
        "{name} and I am {age} years old.\"\n",
        "class Person:\n",
        "    def __init__(self, name, age):\n",
        "        \"\"\"Initialize a Person with a name and age\"\"\"\n",
        "        self.name = name\n",
        "        self.age = age\n",
        "\n",
        "    def greet(self):\n",
        "        \"\"\"Method that prints a greeting with the person's name and age\"\"\"\n",
        "        print(f\"Hello, my name is {self.name} and I am {self.age} years old.\")\n",
        "\n",
        "# Testing the Person class\n",
        "person1 = Person(\"John\", 30)\n",
        "person1.greet()  # Should display: Hello, my name is John and I am 30 years old.\n",
        "\n",
        "person2 = Person(\"Alice\", 25)\n",
        "person2.greet()  # Should display: Hello, my name is Alice and I am 25 years old."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gp2AEJxlIMEK",
        "outputId": "05fe0d3b-e0aa-4ea6-88a8-8c63f9c546b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, my name is John and I am 30 years old.\n",
            "Hello, my name is Alice and I am 25 years old.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "12. Implement a class Student with attributes name and grades. Create a method average_grade() to compute\n",
        "the average of the grades.\n",
        "class Student:\n",
        "    def __init__(self, name, grades):\n",
        "        \"\"\"Initialize a Student with a name and list of grades\"\"\"\n",
        "        self.name = name\n",
        "        self.grades = grades\n",
        "\n",
        "    def average_grade(self):\n",
        "        \"\"\"Method to compute the average of the student's grades\"\"\"\n",
        "        if not self.grades:\n",
        "            return 0  # Return 0 for empty grades list to avoid division by zero\n",
        "        return sum(self.grades) / len(self.grades)\n",
        "\n",
        "# Testing the Student class\n",
        "student1 = Student(\"John\", [85, 90, 78, 92, 88])\n",
        "print(f\"{student1.name}'s average grade: {student1.average_grade()}\")\n",
        "\n",
        "student2 = Student(\"Alice\", [95, 92, 98, 99])\n",
        "print(f\"{student2.name}'s average grade: {student2.average_grade()}\")\n",
        "\n",
        "# Edge case: student with no grades\n",
        "student3 = Student(\"Bob\", [])\n",
        "print(f\"{student3.name}'s average grade: {student3.average_grade()}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O3g9TLL-IzCM",
        "outputId": "8715f5e4-562c-48cd-a2f6-74c94ae10cae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "John's average grade: 86.6\n",
            "Alice's average grade: 96.0\n",
            "Bob's average grade: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "13. Create a class Rectangle with methods set_dimensions() to set the dimensions and area() to calculate the\n",
        "area.\n",
        "class Rectangle:\n",
        "    def __init__(self):\n",
        "        \"\"\"Initialize Rectangle with default dimensions of 0\"\"\"\n",
        "        self.width = 0\n",
        "        self.height = 0\n",
        "\n",
        "    def set_dimensions(self, width, height):\n",
        "        \"\"\"Method to set the dimensions of the rectangle\"\"\"\n",
        "        self.width = width\n",
        "        self.height = height\n",
        "\n",
        "    def area(self):\n",
        "        \"\"\"Method to calculate the area of the rectangle\"\"\"\n",
        "        return self.width * self.height\n",
        "\n",
        "# Testing the Rectangle class\n",
        "rect1 = Rectangle()\n",
        "rect1.set_dimensions(5, 10)\n",
        "print(f\"Rectangle with dimensions {rect1.width}x{rect1.height} has area: {rect1.area()}\")\n",
        "\n",
        "rect2 = Rectangle()\n",
        "rect2.set_dimensions(7, 3)\n",
        "print(f\"Rectangle with dimensions {rect2.width}x{rect2.height} has area: {rect2.area()}\")\n",
        "\n",
        "# Test with zero dimensions\n",
        "rect3 = Rectangle()\n",
        "print(f\"Rectangle with default dimensions {rect3.width}x{rect3.height} has area: {rect3.area()}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D5O8vtpwJFXI",
        "outputId": "43ac34d9-925c-43e3-b3d6-6fe41925ef64"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rectangle with dimensions 5x10 has area: 50\n",
            "Rectangle with dimensions 7x3 has area: 21\n",
            "Rectangle with default dimensions 0x0 has area: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "14. Create a class Employee with a method calculate_salary() that computes the salary based on hours worked\n",
        "and hourly rate. Create a derived class Manager that adds a bonus to the salary.\n",
        "class Employee:\n",
        "    def __init__(self, name, hourly_rate):\n",
        "        \"\"\"Initialize Employee with name and hourly rate\"\"\"\n",
        "        self.name = name\n",
        "        self.hourly_rate = hourly_rate\n",
        "        self.hours_worked = 0\n",
        "\n",
        "    def log_hours(self, hours):\n",
        "        \"\"\"Log hours worked by the employee\"\"\"\n",
        "        self.hours_worked += hours\n",
        "\n",
        "    def calculate_salary(self):\n",
        "        \"\"\"Calculate salary based on hours worked and hourly rate\"\"\"\n",
        "        return self.hours_worked * self.hourly_rate\n",
        "\n",
        "    def __str__(self):\n",
        "        return f\"{self.name}: {self.hours_worked} hours at ${self.hourly_rate}/hour = ${self.calculate_salary()}\"\n",
        "\n",
        "\n",
        "class Manager(Employee):\n",
        "    def __init__(self, name, hourly_rate, bonus):\n",
        "        \"\"\"Initialize Manager with name, hourly rate and bonus amount\"\"\"\n",
        "        super().__init__(name, hourly_rate)  # Call parent class constructor\n",
        "        self.bonus = bonus\n",
        "\n",
        "    def calculate_salary(self):\n",
        "        \"\"\"Override calculate_salary to add bonus to the base salary\"\"\"\n",
        "        base_salary = super().calculate_salary()  # Get the base salary calculation\n",
        "        return base_salary + self.bonus\n",
        "\n",
        "    def __str__(self):\n",
        "        return f\"Manager {self.name}: {self.hours_worked} hours at ${self.hourly_rate}/hour + ${self.bonus} bonus = ${self.calculate_salary()}\"\n",
        "\n",
        "\n",
        "# Testing the classes\n",
        "employee = Employee(\"John\", 15)\n",
        "employee.log_hours(40)\n",
        "print(employee)\n",
        "\n",
        "manager = Manager(\"Jane\", 25, 500)\n",
        "manager.log_hours(40)\n",
        "print(manager)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "05QK773AJbxn",
        "outputId": "fd787e6b-d045-4866-9fd4-7f3ea7c51493"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "John: 40 hours at $15/hour = $600\n",
            "Manager Jane: 40 hours at $25/hour + $500 bonus = $1500\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "15. Create a class Product with attributes name, price, and quantity. Implement a method total_price() that\n",
        "calculates the total price of the product. Product:\n",
        "    def __init__(self, name, price, quantity):\n",
        "        \"\"\"Initialize Product with name, price, and quantity\"\"\"\n",
        "        self.name = name\n",
        "        self.price = price\n",
        "        self.quantity = quantity\n",
        "\n",
        "    def total_price(self):\n",
        "        \"\"\"Calculate the total price of the product based on price and quantity\"\"\"\n",
        "        return self.price * self.quantity\n",
        "\n",
        "    def __str__(self):\n",
        "        \"\"\"Return a string representation of the product\"\"\"\n",
        "        return f\"{self.name}: {self.quantity} units at ${self.price}/unit = ${self.total_price()}\"\n",
        "\n",
        "# Testing the Product class\n",
        "laptop = Product(\"Laptop\", 899.99, 2)\n",
        "print(laptop)\n",
        "\n",
        "headphones = Product(\"Headphones\", 59.99, 5)\n",
        "print(headphones)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N0JnnZq4J5mr",
        "outputId": "fbf5ea0d-b421-4135-9068-2f265580068c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Laptop: 2 units at $899.99/unit = $1799.98\n",
            "Headphones: 5 units at $59.99/unit = $299.95\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "16. Create a class Animal with an abstract method sound(). Create two derived classes Cow and Sheep that\n",
        "implement the sound() method.\n",
        "from abc import ABC, abstractmethod\n",
        "\n",
        "class Animal(ABC):\n",
        "    \"\"\"Abstract class for animals with an abstract sound method\"\"\"\n",
        "\n",
        "    def __init__(self, name):\n",
        "        \"\"\"Initialize Animal with a name\"\"\"\n",
        "        self.name = name\n",
        "\n",
        "    @abstractmethod\n",
        "    def sound(self):\n",
        "        \"\"\"Abstract method that must be implemented by derived classes\"\"\"\n",
        "        pass\n",
        "\n",
        "    def __str__(self):\n",
        "        \"\"\"Return a string representation of the animal\"\"\"\n",
        "        return f\"{self.name} says {self.sound()}\"\n",
        "\n",
        "\n",
        "class Cow(Animal):\n",
        "    \"\"\"Cow class that inherits from Animal\"\"\"\n",
        "\n",
        "    def sound(self):\n",
        "        \"\"\"Implement the sound method for Cow\"\"\"\n",
        "        return \"Moo!\"\n",
        "\n",
        "\n",
        "class Sheep(Animal):\n",
        "    \"\"\"Sheep class that inherits from Animal\"\"\"\n",
        "\n",
        "    def sound(self):\n",
        "        \"\"\"Implement the sound method for Sheep\"\"\"\n",
        "        return \"Baa!\"\n",
        "\n",
        "\n",
        "# Testing the classes\n",
        "cow = Cow(\"Bessie\")\n",
        "sheep = Sheep(\"Fluffy\")\n",
        "\n",
        "print(cow)\n",
        "print(sheep)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VwSyBc8IKaHR",
        "outputId": "4c2aba85-fe68-47d9-b3c3-0ca70d17ba6a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Bessie says Moo!\n",
            "Fluffy says Baa!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "17. Create a class Book with attributes title, author, and year_published. Add a method get_book_info() that\n",
        "returns a formatted string with the book's details.\n",
        "class Book:\n",
        "    \"\"\"Class representing a book with title, author, and year published information\"\"\"\n",
        "\n",
        "    def __init__(self, title, author, year_published):\n",
        "        \"\"\"Initialize a Book with title, author, and year published\"\"\"\n",
        "        self.title = title\n",
        "        self.author = author\n",
        "        self.year_published = year_published\n",
        "\n",
        "    def get_book_info(self):\n",
        "        \"\"\"Returns a formatted string with the book's details\"\"\"\n",
        "        return f\"'{self.title}' by {self.author} ({self.year_published})\"\n",
        "\n",
        "# Testing the class\n",
        "book1 = Book(\"The Great Gatsby\", \"F. Scott Fitzgerald\", 1925)\n",
        "book2 = Book(\"To Kill a Mockingbird\", \"Harper Lee\", 1960)\n",
        "\n",
        "print(book1.get_book_info())\n",
        "print(book2.get_book_info())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DyAGgJOIKvm2",
        "outputId": "b2d5e377-d889-4b09-c647-b904dd2df64d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "'The Great Gatsby' by F. Scott Fitzgerald (1925)\n",
            "'To Kill a Mockingbird' by Harper Lee (1960)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "18. Create a class House with attributes address and price. Create a derived class Mansion that adds an\n",
        "attribute number_of_rooms.\n",
        "\n",
        "class House:\n",
        "    \"\"\"Class representing a house with address and price information\"\"\"\n",
        "\n",
        "    def __init__(self, address, price):\n",
        "        \"\"\"Initialize a House with address and price\"\"\"\n",
        "        self.address = address\n",
        "        self.price = price\n",
        "\n",
        "    def get_info(self):\n",
        "        \"\"\"Returns formatted information about the house\"\"\"\n",
        "        return f\"House at {self.address}, priced at ${self.price:,}\"\n",
        "\n",
        "\n",
        "class Mansion(House):\n",
        "    \"\"\"Class representing a mansion, derived from House with added number of rooms\"\"\"\n",
        "\n",
        "    def __init__(self, address, price, number_of_rooms):\n",
        "        \"\"\"Initialize a Mansion with address, price, and number of rooms\"\"\"\n",
        "        # Call the parent class constructor\n",
        "        super().__init__(address, price)\n",
        "        self.number_of_rooms = number_of_rooms\n",
        "\n",
        "    def get_info(self):\n",
        "        \"\"\"Returns formatted information about the mansion including rooms\"\"\"\n",
        "        return f\"Mansion at {self.address}, priced at ${self.price:,} with {self.number_of_rooms} rooms\"\n",
        "\n",
        "\n",
        "# Testing the classes\n",
        "house = House(\"123 Main St\", 250000)\n",
        "mansion = Mansion(\"456 Luxury Ave\", 2500000, 15)\n",
        "\n",
        "print(house.get_info())\n",
        "print(mansion.get_info())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FmO7G2XCLHxa",
        "outputId": "d0bc99f2-f8ce-4d2b-f5c4-c017968e1887"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "House at 123 Main St, priced at $250,000\n",
            "Mansion at 456 Luxury Ave, priced at $2,500,000 with 15 rooms\n"
          ]
        }
      ]
    }
  ]
}