{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Function\n",
        "\n",
        "            KNN & PCA\n",
        "\n",
        "Question 1: What is K-Nearest Neighbors (KNN) and how does it work in both classification and regressionn problem?\n",
        "Ans K-Nearest Neighbors (KNN) is a supervised machine learning algorithm used for both classification and regression problems.\n",
        "It’s called lazy learning because it doesn’t learn an explicit model during training – it simply stores the data and makes predictions at the time of query.\n",
        "\n",
        "How KNN Works\n",
        "\n",
        "1. Choose the number of neighbors (k).\n",
        "\n",
        "2. Calculate distance (commonly Euclidean distance, but Manhattan or Minkowski can also be used) between the query point and all data points.\n",
        "\n",
        "3. Find the k nearest neighbors to the query point.\n",
        "\n",
        "4. Make prediction:\n",
        "\n",
        "For classification → Majority vote among neighbors.\n",
        "\n",
        "For regression → Take the average (or weighted average) of neighbors’ values.\n",
        "\n",
        "KNN in Classification\n",
        "\n",
        "Example: Predict whether a fruit is Apple or Orange based on weight and color.\n",
        "\n",
        "If k = 5 and among the 5 nearest neighbors, 3 are Apples and 2 are Oranges, then prediction = Apple.\n",
        "\n",
        "It uses the mode (most frequent class) of neighbors.\n",
        "\n",
        "KNN in Regression\n",
        "\n",
        "Example: Predict the price of a house based on area and location.\n",
        "\n",
        "If k = 4 nearest neighbors have house prices: 50, 55, 60, 65 (Lakhs)\n",
        "→ Prediction = (50 + 55 + 60 + 65)/4 = 57.5 Lakhs\n",
        "\n",
        "It uses the mean (or weighted mean) of neighbors.\n",
        "\n",
        "Question 2: What is the Curse of Dimensionality and how does it affect KNN performance?\n",
        "\n",
        "Ans The Curse of Dimensionality refers to various problems that arise when working with high-dimensional data (i.e., data with many features/variables).\n",
        "As dimensions increase, data becomes sparse, and distance metrics (like Euclidean distance) become less meaningful.\n",
        "\n",
        "How it affects KNN Performance\n",
        "\n",
        "KNN heavily relies on distance calculations to find the \"nearest neighbors.\" In high dimensions:\n",
        "\n",
        "1. Distances become less discriminative\n",
        "\n",
        "In high dimensions, the difference between the nearest neighbor and farthest neighbor distance shrinks.\n",
        "\n",
        "Example: In 2D, nearest neighbor might be much closer than the farthest point, but in 100D, both distances become almost the same.\n",
        "\n",
        "This makes it hard for KNN to distinguish between \"close\" and \"far\" neighbors.\n",
        "\n",
        "2. Increased computational cost\n",
        "\n",
        "Distance calculation requires looping through all features. More dimensions = higher computation.\n",
        "\n",
        "For large datasets, this makes KNN very slow.\n",
        "\n",
        "3. Risk of overfitting\n",
        "\n",
        "With too many irrelevant features, noise dominates, and KNN may pick wrong neighbors.\n",
        "\n",
        "This hurts accuracy in both classification and regression.\n",
        "\n",
        "Question 3: What is Principal Component Analysis (PCA)? How is it different from feature selection?\n",
        "\n",
        "Ans Principal Component Analysis (PCA) is a dimensionality reduction technique that transforms a dataset with many correlated features into a smaller set of uncorrelated variables called principal components.\n",
        "\n",
        "Each principal component is a linear combination of the original features.\n",
        "\n",
        "The first principal component captures the maximum variance in the data.\n",
        "\n",
        "The second principal component captures the maximum variance left, but it is orthogonal (independent) to the first, and so on.\n",
        "\n",
        "PCA is widely used for reducing dimensionality, visualization, and noise removal.\n",
        "\n",
        "Example: If you have 100 correlated features in your dataset, PCA may reduce them to 5–10 principal components while still retaining most of the information (variance).\n",
        "\n",
        "How is PCA different from Feature Selection\n",
        "\n",
        "Aspect  PCA (Dimensionality Reduction)  Feature Selection\n",
        "\n",
        "Method  Creates new features (principal components) as combinations of original features.   Selects a subset of existing features from the dataset.\n",
        "Interpretability    Principal components are not easily interpretable because they are combinations of features.    Selected features are original features, so they are interpretable.\n",
        "Goal    Reduce dimensionality by capturing maximum variance in fewer components.    Reduce dimensionality by keeping only the most relevant/important features.\n",
        "Type    Feature extraction (transformation).    Feature elimination/selection.\n",
        "Example Transform 10 correlated features into 3 uncorrelated principal components.  Pick the top 3 most important features (e.g., Age, Salary, Education) and drop the rest.\n",
        "\n",
        "Question 4: What are eigenvalues and eigenvectors in PCA, and why are they\n",
        "important?\n",
        "\n",
        "\n",
        "Ans Eigenvalues and Eigenvectors in PCA\n",
        "\n",
        "1. Eigenvectors\n",
        "\n",
        "In PCA, eigenvectors represent the directions (axes) along which the data has the most variance.\n",
        "\n",
        "Each eigenvector defines a principal component.\n",
        "\n",
        "Example: Imagine rotating your coordinate system so that one axis aligns with the direction of maximum spread of the data — that new axis is given by an eigenvector.\n",
        "\n",
        "2. Eigenvalues\n",
        "\n",
        "Each eigenvalue corresponds to an eigenvector and tells us how much variance of the data is captured along that direction.\n",
        "\n",
        "A larger eigenvalue = that principal component explains more variance (i.e., more \"information\").\n",
        "\n",
        " Why They Are Important in PCA?\n",
        "\n",
        "1. Finding Principal Components\n",
        "\n",
        "PCA works by computing the covariance matrix of the data.\n",
        "\n",
        "Then we calculate the eigenvalues and eigenvectors of this matrix.\n",
        "\n",
        "Eigenvectors → principal components (directions).\n",
        "\n",
        "Eigenvalues → importance (variance explained).\n",
        "\n",
        "2. Dimensionality Reduction\n",
        "\n",
        "We rank eigenvectors by their eigenvalues (largest to smallest).\n",
        "\n",
        "Keep the top k eigenvectors (principal components) that explain most of the variance.\n",
        "\n",
        "Discard components with very small eigenvalues since they contribute little information.\n",
        "\n",
        "3. Variance Explained\n",
        "\n",
        "The ratio of an eigenvalue to the sum of all eigenvalues tells us the percentage of variance explained by that principal component.\n",
        "\n",
        "Example: If PC1’s eigenvalue = 5 and total eigenvalues sum = 10, then PC1 explains 50% of the variance.\n",
        "\n",
        "Question 5: How do KNN and PCA complement each other when applied in a single pipeline?\n",
        "\n",
        "Ans When KNN (K-Nearest Neighbors) and PCA (Principal Component Analysis) are applied in a single pipeline, they complement each other in a way that improves performance and efficiency.\n",
        "\n",
        "1. Role of PCA\n",
        "\n",
        "PCA is a dimensionality reduction technique.\n",
        "\n",
        "It transforms the original features into a new set of uncorrelated features called principal components, ordered by the amount of variance they capture.\n",
        "\n",
        "Reduces the number of features while retaining most of the information.\n",
        "\n",
        "Helps mitigate the curse of dimensionality (important for KNN, which suffers when dimensions are high).\n",
        "\n",
        "2. Role of KNN\n",
        "\n",
        "KNN is a distance-based algorithm.\n",
        "\n",
        "It predicts the label of a new point by looking at the labels of its k nearest neighbors in the feature space.\n",
        "\n",
        "Works well when features are meaningful and distances reflect similarity.\n",
        "\n",
        "3. Why PCA helps KNN\n",
        "\n",
        "Reduces noise: PCA removes less informative features, which may otherwise confuse KNN.\n",
        "\n",
        "Reduces dimensionality: Fewer dimensions → distances between points are more meaningful.\n",
        "\n",
        "Speeds up computation: KNN requires computing distances for every neighbor. Fewer features → faster distance calculations.\n",
        "\n",
        "Improves accuracy: By keeping only the most important components, PCA can help KNN focus on the features that actually separate the classes.\n",
        "\n",
        "4. Pipeline\n",
        "\n",
        "Typical workflow:\n",
        "\n",
        "Raw Data → Standardization → PCA → KNN → Prediction\n",
        "\n",
        "Standardization: PCA is sensitive to scale; KNN is distance-based → we standardize first.\n",
        "\n",
        "PCA: Reduce dimensions while preserving variance.\n",
        "\n",
        "KNN: Use reduced dimensions to compute distances and classify/regress efficiently."
      ],
      "metadata": {
        "id": "mkzxkqtUR_jh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Question 6: Train a KNN Classifier on the Wine dataset with and without feature\n",
        "scaling. Compare model accuracy in both cases.\n",
        "\n",
        "# Import necessary libraries\n",
        "from sklearn.datasets import load_wine\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Load Wine dataset\n",
        "wine = load_wine()\n",
        "X = wine.data\n",
        "y = wine.target\n",
        "\n",
        "# Split dataset into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# ===============================\n",
        "# 1. KNN WITHOUT feature scaling\n",
        "# ===============================\n",
        "knn_no_scaling = KNeighborsClassifier(n_neighbors=5)\n",
        "knn_no_scaling.fit(X_train, y_train)\n",
        "y_pred_no_scaling = knn_no_scaling.predict(X_test)\n",
        "accuracy_no_scaling = accuracy_score(y_test, y_pred_no_scaling)\n",
        "print(\"KNN Accuracy without scaling:\", accuracy_no_scaling)\n",
        "\n",
        "# ===============================\n",
        "# 2. KNN WITH feature scaling\n",
        "# ===============================\n",
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "knn_with_scaling = KNeighborsClassifier(n_neighbors=5)\n",
        "knn_with_scaling.fit(X_train_scaled, y_train)\n",
        "y_pred_with_scaling = knn_with_scaling.predict(X_test_scaled)\n",
        "accuracy_with_scaling = accuracy_score(y_test, y_pred_with_scaling)\n",
        "print(\"KNN Accuracy with scaling:\", accuracy_with_scaling)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HeK02ydhmBSv",
        "outputId": "31a8b9e0-2fe7-4b10-f798-827278c18347"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "KNN Accuracy without scaling: 0.7222222222222222\n",
            "KNN Accuracy with scaling: 0.9444444444444444\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "Question 7: Train a PCA model on the Wine dataset and print the explained variance\n",
        "ratio of each principal component.\n",
        "\n",
        "# Import necessary libraries\n",
        "from sklearn.datasets import load_wine\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Load Wine dataset\n",
        "wine = load_wine()\n",
        "X = wine.data\n",
        "\n",
        "# Feature scaling (important for PCA)\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# Train PCA model\n",
        "pca = PCA()\n",
        "X_pca = pca.fit_transform(X_scaled)\n",
        "\n",
        "# Print explained variance ratio of each principal component\n",
        "explained_variance_ratio = pca.explained_variance_ratio_\n",
        "for i, ratio in enumerate(explained_variance_ratio, start=1):\n",
        "    print(f\"Principal Component {i}: {ratio:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HDdq43XhmlVC",
        "outputId": "7933f51e-5c42-4e5a-bf66-85ac51e4da94"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Principal Component 1: 0.3620\n",
            "Principal Component 2: 0.1921\n",
            "Principal Component 3: 0.1112\n",
            "Principal Component 4: 0.0707\n",
            "Principal Component 5: 0.0656\n",
            "Principal Component 6: 0.0494\n",
            "Principal Component 7: 0.0424\n",
            "Principal Component 8: 0.0268\n",
            "Principal Component 9: 0.0222\n",
            "Principal Component 10: 0.0193\n",
            "Principal Component 11: 0.0174\n",
            "Principal Component 12: 0.0130\n",
            "Principal Component 13: 0.0080\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "Question 8: Train a KNN Classifier on the PCA-transformed dataset (retain top 2\n",
        "components). Compare the accuracy with the original dataset.\n",
        "\n",
        "# Import necessary libraries\n",
        "from sklearn.datasets import load_wine\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Load Wine dataset\n",
        "wine = load_wine()\n",
        "X = wine.data\n",
        "y = wine.target\n",
        "\n",
        "# Split original dataset\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# ===============================\n",
        "# 1. KNN on original dataset (with scaling)\n",
        "# ===============================\n",
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "knn_original = KNeighborsClassifier(n_neighbors=5)\n",
        "knn_original.fit(X_train_scaled, y_train)\n",
        "y_pred_original = knn_original.predict(X_test_scaled)\n",
        "accuracy_original = accuracy_score(y_test, y_pred_original)\n",
        "print(\"KNN Accuracy on original dataset:\", accuracy_original)\n",
        "\n",
        "# ===============================\n",
        "# 2. KNN on PCA-transformed dataset (top 2 components)\n",
        "# ===============================\n",
        "pca = PCA(n_components=2)\n",
        "X_train_pca = pca.fit_transform(X_train_scaled)\n",
        "X_test_pca = pca.transform(X_test_scaled)\n",
        "\n",
        "knn_pca = KNeighborsClassifier(n_neighbors=5)\n",
        "knn_pca.fit(X_train_pca, y_train)\n",
        "y_pred_pca = knn_pca.predict(X_test_pca)\n",
        "accuracy_pca = accuracy_score(y_test, y_pred_pca)\n",
        "print(\"KNN Accuracy on PCA-transformed dataset (2 components):\", accuracy_pca)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gEB26jKGm7ui",
        "outputId": "2edd8b9e-1feb-42f7-d621-d765f6b2482e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "KNN Accuracy on original dataset: 0.9444444444444444\n",
            "KNN Accuracy on PCA-transformed dataset (2 components): 1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "Question 9: Train a KNN Classifier with different distance metrics (euclidean,\n",
        "manhattan) on the scaled Wine dataset and compare the results.\n",
        "\n",
        "# Import libraries\n",
        "from sklearn.datasets import load_wine\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Load Wine dataset\n",
        "wine = load_wine()\n",
        "X = wine.data\n",
        "y = wine.target\n",
        "\n",
        "# Split dataset\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Scale features\n",
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "# ===============================\n",
        "# KNN with Euclidean distance\n",
        "# ===============================\n",
        "knn_euclidean = KNeighborsClassifier(n_neighbors=5, metric='euclidean')\n",
        "knn_euclidean.fit(X_train_scaled, y_train)\n",
        "y_pred_euclidean = knn_euclidean.predict(X_test_scaled)\n",
        "accuracy_euclidean = accuracy_score(y_test, y_pred_euclidean)\n",
        "print(\"KNN Accuracy with Euclidean distance:\", accuracy_euclidean)\n",
        "\n",
        "# ===============================\n",
        "# KNN with Manhattan distance\n",
        "# ===============================\n",
        "knn_manhattan = KNeighborsClassifier(n_neighbors=5, metric='manhattan')\n",
        "knn_manhattan.fit(X_train_scaled, y_train)\n",
        "y_pred_manhattan = knn_manhattan.predict(X_test_scaled)\n",
        "accuracy_manhattan = accuracy_score(y_test, y_pred_manhattan)\n",
        "print(\"KNN Accuracy with Manhattan distance:\", accuracy_manhattan)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z-86Gyl12Hjd",
        "outputId": "e73e2e39-a811-454d-d306-f839747f7bf1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "KNN Accuracy with Euclidean distance: 0.9444444444444444\n",
            "KNN Accuracy with Manhattan distance: 0.9444444444444444\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question 10: You are working with a high-dimensional gene expression dataset to\n",
        "classify patients with different types of cancer.\n",
        "Due to the large number of features and a small number of samples, traditional models\n",
        "overfit.\n",
        "Explain how you would:\n",
        "● Use PCA to reduce dimensionality\n",
        "● Decide how many components to keep\n",
        "● Use KNN for classification post-dimensionality reduction\n",
        "● Evaluate the model\n",
        "● Justify this pipeline to your stakeholders as a robust solution for real-world\n",
        "biomedical data\n",
        "\n",
        "Ans Here’s a comprehensive explanation for handling a high-dimensional gene expression dataset using PCA + KNN and why this pipeline is suitable for biomedical applications:\n",
        "\n",
        "1. Use PCA to Reduce Dimensionality\n",
        "\n",
        "Gene expression datasets typically have thousands of features (genes) but relatively few samples (patients).\n",
        "\n",
        "High dimensionality leads to overfitting because models try to learn patterns from noise rather than true signal.\n",
        "\n",
        "Principal Component Analysis (PCA) transforms the dataset into a set of orthogonal components (linear combinations of the original features) that capture the most variance in the data.\n",
        "\n",
        "This reduces the number of features while preserving the important information, making the dataset easier for models like KNN to handle.\n",
        "\n",
        "2. Decide How Many Components to Keep\n",
        "\n",
        "Use the explained variance ratio provided by PCA.\n",
        "\n",
        "Compute the cumulative explained variance and choose the number of components that cover 90–95% of the total variance.\n",
        "\n",
        "This ensures that most of the information in the original data is retained while significantly reducing dimensionality.\n",
        "\n",
        "A scree plot or cumulative variance plot can help visually decide the cut-off.\n",
        "\n",
        "3. Use KNN for Classification Post-Dimensionality Reduction\n",
        "\n",
        "After reducing dimensions with PCA, the dataset becomes lower-dimensional, making distance-based methods like KNN more effective.\n",
        "\n",
        "Steps:\n",
        "\n",
        "1. Scale the features (important for KNN to ensure fair distance calculation).\n",
        "\n",
        "2. Transform the scaled data using PCA with the selected number of components.\n",
        "\n",
        "3. Train a KNN classifier on the PCA-transformed data.\n",
        "\n",
        "KNN is simple, interpretable, and works well with reduced dimensions, which helps prevent overfitting.\n",
        "\n",
        "4. Evaluate the Model\n",
        "\n",
        "Split data into training and test sets or use cross-validation.\n",
        "\n",
        "Use metrics suitable for multiclass classification, such as:\n",
        "\n",
        "Accuracy\n",
        "\n",
        "Confusion matrix\n",
        "\n",
        "Precision, recall, F1-score\n",
        "\n",
        "These metrics ensure that the model is not only accurate but also reliable across all cancer types.\n",
        "\n",
        "5. Justify this Pipeline to Stakeholders\n",
        "\n",
        "Problem: High-dimensional biomedical datasets risk overfitting, leading to unreliable predictions.\n",
        "\n",
        "Solution:\n",
        "\n",
        "PCA reduces noise and dimensionality while retaining key patterns.\n",
        "\n",
        "KNN is a non-parametric model that performs well on the reduced dataset.\n",
        "\n",
        "Evaluation metrics show generalization to unseen samples.\n",
        "\n",
        "Stakeholder-friendly explanation:\n",
        "\n",
        "“We reduce thousands of gene measurements to a smaller set of informative components, then classify patients using KNN. This pipeline prevents overfitting, improves robustness, and provides interpretable results suitable for real-world biomedical applications.”"
      ],
      "metadata": {
        "id": "vhlZlN8zogsD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Import libraries\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# 1. Simulate high-dimensional gene expression dataset\n",
        "X, y = make_classification(n_samples=100, n_features=500, n_informative=50,\n",
        "                           n_redundant=50, n_classes=3, random_state=42)\n",
        "\n",
        "# Split dataset\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Scale features\n",
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "# 2. Apply PCA\n",
        "pca = PCA()\n",
        "X_train_pca = pca.fit_transform(X_train_scaled)\n",
        "X_test_pca = pca.transform(X_test_scaled)\n",
        "\n",
        "# Plot cumulative explained variance\n",
        "cumulative_variance = np.cumsum(pca.explained_variance_ratio_)\n",
        "plt.figure(figsize=(8,5))\n",
        "plt.plot(cumulative_variance*100, marker='o')\n",
        "plt.xlabel('Number of Components')\n",
        "plt.ylabel('Cumulative Explained Variance (%)')\n",
        "plt.title('PCA - Cumulative Explained Variance')\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "# Keep components to retain 95% variance\n",
        "n_components_95 = np.argmax(cumulative_variance >= 0.95) + 1\n",
        "print(\"Number of components to retain 95% variance:\", n_components_95)\n",
        "\n",
        "pca_final = PCA(n_components=n_components_95)\n",
        "X_train_pca_final = pca_final.fit_transform(X_train_scaled)\n",
        "X_test_pca_final = pca_final.transform(X_test_scaled)\n",
        "\n",
        "# 3. Train KNN on PCA-transformed data\n",
        "knn = KNeighborsClassifier(n_neighbors=5)\n",
        "knn.fit(X_train_pca_final, y_train)\n",
        "y_pred = knn.predict(X_test_pca_final)\n",
        "\n",
        "# 4. Evaluate the model\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(\"KNN Accuracy after PCA:\", accuracy)\n",
        "print(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred))\n",
        "print(\"\\nConfusion Matrix:\\n\", confusion_matrix(y_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 550
        },
        "id": "wMvVQTRD0Yjb",
        "outputId": "6b914b3b-2d09-4cc7-a0c6-cd5e695c743e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of components to retain 95% variance: 70\n",
            "KNN Accuracy after PCA: 0.55\n",
            "\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.80      0.67      0.73         6\n",
            "           1       0.42      0.83      0.56         6\n",
            "           2       0.67      0.25      0.36         8\n",
            "\n",
            "    accuracy                           0.55        20\n",
            "   macro avg       0.63      0.58      0.55        20\n",
            "weighted avg       0.63      0.55      0.53        20\n",
            "\n",
            "\n",
            "Confusion Matrix:\n",
            " [[4 2 0]\n",
            " [0 5 1]\n",
            " [1 5 2]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Xiy5LZkZzXto"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}