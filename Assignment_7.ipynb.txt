{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "#Function\n",
        "\n",
        "Q1.What is a RESTful API?\n",
        "\n",
        "Ans A RESTful API (Representational State Transfer API) is a way for two computer systems to communicate over HTTP (or HTTPS) following a set of principles. RESTful APIs are widely used in web services because they are simple, scalable, and stateless.\n",
        "\n",
        "Here’s a simple breakdown:\n",
        "\n",
        "1. REST Principles\n",
        "RESTful APIs follow these key principles:\n",
        "\n",
        "Stateless: Each request from a client to server must contain all the information needed to understand and process the request. The server does not store session state.\n",
        "Client-Server: The client and server are independent. The client sends requests, and the server sends responses.\n",
        "Cacheable: Responses must define themselves as cacheable or not to improve performance.\n",
        "Uniform Interface: Standard set of rules, e.g., using HTTP methods like:\n",
        "\n",
        "GET (read data)\n",
        "POST (create data)\n",
        "PUT (update data)\n",
        "DELETE (delete data)\n",
        "\n",
        "Resource-Based: Everything is treated as a resource (e.g., users, products) and is identified by URLs.\n",
        "\n",
        "2. Example\n",
        "Suppose you have a RESTful API for a bookstore:\n",
        "\n",
        "Action\n",
        "HTTP Method\n",
        "URL\n",
        "Description\n",
        "\n",
        "Get all books\n",
        "GET\n",
        "/books\n",
        "Retrieve list of books\n",
        "\n",
        "Get one book\n",
        "GET\n",
        "/books/1\n",
        "Retrieve book with ID 1\n",
        "\n",
        "Add new book\n",
        "POST\n",
        "/books\n",
        "Create a new book\n",
        "\n",
        "Update book\n",
        "PUT\n",
        "/books/1\n",
        "Update book with ID 1\n",
        "\n",
        "Delete book\n",
        "DELETE\n",
        "/books/1\n",
        "Delete book with ID 1\n",
        "\n",
        "3. Why RESTful?Easy to use and understand.\n",
        "Works well over the internet using standard HTTP.\n",
        "Scales well for large systems.\n",
        "If you want, I can also explain:\n",
        "how to build a RESTful API (e.g. with Flask or Node.js),\n",
        "how authentication works in REST,\n",
        "or the difference between REST and other API types like GraphQL.\n",
        "\n",
        "\n",
        "Q2.Explain the concept of API specification\n",
        "\n",
        "Ans API Specification is like a contract or blueprint for how an API works.\n",
        "It tells developers exactly:\n",
        "\n",
        "What the API does\n",
        "\n",
        "How to use it\n",
        "\n",
        "What inputs it expects\n",
        "\n",
        "What outputs it returns\n",
        "\n",
        "Why do we need API specification?\n",
        "\n",
        "Because when different systems or applications need to talk to each other, they must \"speak the same language.\"\n",
        "The API specification defines that language.\n",
        "\n",
        "What does it usually include?\n",
        "\n",
        "Part    Explanation Example\n",
        "\n",
        "Endpoints (URLs)    Where to send requests  /users, /orders/{orderId}\n",
        "Methods HTTP methods used   GET, POST, PUT, DELETE\n",
        "Request Parameters  What data to send   Query params, headers, body\n",
        "Responses   What data you'll get back   Status codes (200 OK, 404 Not Found) and response body\n",
        "Authentication  How to authorize    API keys, OAuth tokens\n",
        "Error codes What errors mean    400 Bad Request, 500 Server Error\n",
        "\n",
        "Example (simple spec for user API)\n",
        "\n",
        "GET /users/{id}\n",
        "- Description: Get user details\n",
        "- Parameters:\n",
        "  - id (path): integer, required\n",
        "- Responses:\n",
        "  - 200 OK: returns user data (JSON)\n",
        "  - 404 Not Found: user doesn't exist\n",
        "\n",
        "Common API Specification Formats:\n",
        "\n",
        "OpenAPI (Swagger) → very popular\n",
        "\n",
        "RAML\n",
        "\n",
        "API Blueprint\n",
        "\n",
        "GraphQL SDL (for GraphQL APIs)\n",
        "\n",
        "Summary:\n",
        "\n",
        "API specification = A clear, precise document that describes how to correctly use an API.\n",
        "\n",
        "If you want, I can also show you:\n",
        "\n",
        "A real-world example\n",
        "\n",
        "How to write one\n",
        "\n",
        "Tools to generate API specs\n",
        "\n",
        "\n",
        "Q3.What is Flask, and why is it popular for building APIs?\n",
        "\n",
        "Ans Flask is a lightweight, open-source web framework written in Python.\n",
        "It allows you to build web applications and APIs (Application Programming Interfaces).\n",
        "\n",
        "It’s called a \"microframework\" because it doesn’t come with a lot of built-in tools like Django does — but that’s actually one reason people love it: simplicity and flexibility.\n",
        "\n",
        "Why is Flask popular for building APIs?\n",
        "\n",
        "1. Lightweight & Minimal\n",
        "\n",
        "You only use what you need.\n",
        "\n",
        "Perfect for small to medium-sized APIs where you don’t need heavy features.\n",
        "\n",
        "2. Python-Based\n",
        "\n",
        "Python is easy to write, read, and maintain.\n",
        "\n",
        "Python’s popularity makes Flask very accessible to many developers.\n",
        "\n",
        "3. Simple and Quick to Start\n",
        "\n",
        "You can write a simple API in just a few lines of code.\n",
        "\n",
        "Great for prototyping and MVPs (minimum viable products).\n",
        "\n",
        "\n",
        "4. Extensible\n",
        "\n",
        "You can easily add plugins or third-party libraries for database, authentication, serialization, etc.\n",
        "\n",
        "Commonly used with libraries like SQLAlchemy (for databases) or Marshmallow (for serialization).\n",
        "\n",
        "\n",
        "5. Good for REST APIs\n",
        "\n",
        "Flask makes it easy to handle HTTP methods (GET, POST, PUT, DELETE), URL routing, and JSON responses — all key parts of modern RESTful APIs.\n",
        "\n",
        "6. Large Community & Resources\n",
        "\n",
        "Tons of tutorials, extensions, and community support are available.\n",
        "\n",
        "Very simple Flask API example:\n",
        "\n",
        "from flask import Flask, jsonify\n",
        "\n",
        "app = Flask(__name__)\n",
        "\n",
        "@app.route('/api/hello', methods=['GET'])\n",
        "def hello():\n",
        "    return jsonify({\"message\": \"Hello, World!\"})\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run(debug=True)\n",
        "\n",
        "This tiny code creates a simple API that returns a JSON response.\n",
        "\n",
        "> Flask is popular for APIs because it's simple, flexible, Pythonic, and lets developers quickly build and scale web services without too much overhead.\n",
        "\n",
        "If you want, I can also show you:\n",
        "How to install Flask\n",
        "How to build a more complex API (with database, authentication, etc.)\n",
        "\n",
        "Q4.What is routing in Flask?\n",
        "\n",
        "Ans Routing in Flask means:\n",
        "mapping a URL to a specific function in your code that handles the request.\n",
        "\n",
        "In Flask, routes are defined using Python decorators (@app.route).\n",
        "Each route tells Flask:\n",
        "\n",
        "> When the user visits this URL, run this function.\n",
        "\n",
        "Example:\n",
        "\n",
        "from flask import Flask\n",
        "\n",
        "app = Flask(__name__)\n",
        "\n",
        "@app.route('/')\n",
        "def home():\n",
        "    return 'Welcome to the homepage!'\n",
        "\n",
        "@app.route('/about')\n",
        "def about():\n",
        "    return 'This is the about page.'\n",
        "\n",
        "When someone opens http://localhost:5000/ → Flask calls home()\n",
        "\n",
        "When someone opens http://localhost:5000/about → Flask calls about()\n",
        "\n",
        "Why is routing important?\n",
        "\n",
        "It connects your website URLs to Python code.\n",
        "\n",
        "It decides what content or response to give for each URL.\n",
        "\n",
        "You can also handle:\n",
        "\n",
        "URL variables\n",
        "\n",
        "HTTP methods (GET, POST)\n",
        "\n",
        "Custom routes\n",
        "\n",
        "Example with URL variables:\n",
        "\n",
        "@app.route('/user/<username>')\n",
        "def show_user(username):\n",
        "    return f'Hello, {username}!'\n",
        "\n",
        "In short:\n",
        "Routing = URL → Function → Response\n",
        "\n",
        "If you want, I can also show:\n",
        "\n",
        "dynamic routing\n",
        "\n",
        "routing with methods\n",
        "\n",
        "error handling routes\n",
        "\n",
        "Q5.How do you create a simple Flask application?\n",
        "\n",
        "Ans Let’s create a very simple Flask application step-by-step. This will help you understand how Flask works at a basic level.\n",
        "\n",
        "Step 1: Install Flask\n",
        "\n",
        "First, you need to install Flask. You can do it using pip:\n",
        "\n",
        "pip install Flask\n",
        "\n",
        "Step 2: Create a Python file\n",
        "\n",
        "Create a file, for example:\n",
        "app.py\n",
        "\n",
        "Step 3: Write the simple Flask code\n",
        "\n",
        "from flask import Flask\n",
        "\n",
        "# Create an instance of the Flask class\n",
        "app = Flask(__name__)\n",
        "\n",
        "# Define a route (URL) and its corresponding function\n",
        "@app.route('/')\n",
        "def home():\n",
        "    return \"Hello, World! Welcome to Flask.\"\n",
        "\n",
        "# Run the app\n",
        "if __name__ == '__main__':\n",
        "    app.run(debug=True)\n",
        "\n",
        "Step 4: Run the application\n",
        "\n",
        "In your terminal, navigate to the folder where app.py is located, and run:\n",
        "\n",
        "python app.py\n",
        "\n",
        "You should see output like:\n",
        "\n",
        "* Running on http://127.0.0.1:5000/\n",
        "\n",
        "Step 5: Open in browser\n",
        "\n",
        "Open your browser and go to:\n",
        "http://127.0.0.1:5000/\n",
        "\n",
        "You will see:\n",
        "Hello, World! Welcome to Flask.\n",
        "\n",
        "That’s it — your first Flask app!\n",
        "\n",
        "If you want, I can also show you:\n",
        "\n",
        "how to add multiple routes,\n",
        "\n",
        "handle forms,\n",
        "\n",
        "use templates (HTML),\n",
        "\n",
        "or build a mini project.\n",
        "\n",
        "Q6.What are HTTP methods used in RESTful APIs?\n",
        "\n",
        "Ans HTTP methods are very important in RESTful APIs because they define what kind of operation you want to perform on a resource. Here’s a simple list of the main HTTP methods used in RESTful APIs:\n",
        "\n",
        "HTTP Method Purpose Description\n",
        "\n",
        "GET   Read Retrieve data from the server. It does not change the state of the server.\n",
        "POST Create  Submit new data to the server to create a new resource.\n",
        "PUT Update (Replace)    Update an existing resource entirely or create it if it doesn't exist.\n",
        "PATCH   Update (Partial)    Update part of an existing resource (partial update).\n",
        "DELETE  Delete  Remove a resource from the server.\n",
        "HEAD    Retrieve headers    Same as GET but only retrieves headers, not the body (often used to check if resource exists).\n",
        "OPTIONS Retrieve allowed methods    Returns the HTTP methods supported by the server for a specific resource.\n",
        "\n",
        "Q7.What is the purpose of the @app.route() decorator in Flask?\n",
        "\n",
        "Ans In Flask, the @app.route() decorator is used to map a URL to a Python function.\n",
        "This is how Flask knows which function to run when a user visits a certain URL.\n",
        "\n",
        "Syntax:\n",
        "\n",
        "@app.route('/some-url')\n",
        "def some_function():\n",
        "    return \"Response to show on this URL\"\n",
        "\n",
        "Q8.What is the difference between GET and POST HTTP methods?\n",
        "\n",
        "Ans GET vs POST – Key Differences:\n",
        "GET\n",
        "Retrieves data\n",
        "Data sent in URL\n",
        "Used for read-only operations\n",
        "Can be cached/bookmarked\n",
        "POST\n",
        "Sends data to server (e.g., form data)\n",
        "Data sent in body\n",
        "Used to create/submit new data\n",
        "Not cached/bookmarked\n",
        "\n",
        "Q9.How do you handle errors in Flask APIs?\n",
        "Ans Common ways of Error handling in Flask APIs:\n",
        "a] Using @app.errorhandler() decorator\n",
        "b] Custom error responses in routes\n",
        "c] Returning custom JSON error\n",
        "\n",
        "Q10.How do you connect Flask to a SQL database?\n",
        "\n",
        "Ans To connect Flask to a SQL\n",
        "database:\n",
        "Install SQLAlchemy\n",
        "Set up Flask app with DB config\n",
        "Define models\n",
        "Create tables\n",
        "Now Flask is connected to the database and ready for CRUD operations.\n",
        "\n",
        "Q11.DDM What is the role of Flask-SQLAlchemy?\n",
        "\n",
        "Ans Flask-SQLAlchemy is an extension that integrates SQLAlchemy with Flask.\n",
        "Role:\n",
        "Simplifies database setup and operations\n",
        "Lets you define models as Python classes\n",
        "Handles CRUD easily using ORM (Object-Relational Mapping)\n",
        "Manages database connections and sessions\n",
        "\n",
        "Q12.What are Flask blueprints, and how are they useful?\n",
        "\n",
        "Ans Flask Blueprints are a way to organize a large Flask app into smaller, reusable modules.\n",
        "Why they’re useful:\n",
        "Keep code modular and clean\n",
        "Separate routes by feature (e.g., auth, blog, etc.)\n",
        "Reusable across apps\n",
        "\n",
        "Q13.What is the purpose of Flask's request object?\n",
        "\n",
        "Ans Flask's request object gives access to incoming request data.\n",
        "Purpose:\n",
        "Read form data: request.form\n",
        "Read JSON data: request.get_json()\n",
        "Get URL parameters: request.args\n",
        "Access headers, method, files, cookies, etc.\n",
        "\n",
        "Q14.How do you create a RESTful API endpoint using Flask?\n",
        "\n",
        "Ans Steps to create a RESTful API endpoint in Flask:\n",
        "a] Import Flask & create app\n",
        "b] Define a route (endpoint)\n",
        "c] Run the app\n",
        "\n",
        "Q15.What is the purpose of Flask's jsonify() function?\n",
        "\n",
        "Ans jsonify() in Flask converts Python data (like dict or list) into a JSON response.\n",
        "Purpose:\n",
        "Automatically sets Content-Type: application/json\n",
        "Returns properly formatted JSON\n",
        "Makes API responses cleaner and standard\n",
        "\n",
        "Q16.Explain Flask’s url_for() function?\n",
        "\n",
        "Ans url_for() generates the URL for a given Flask function name (route).\n",
        "Purpose:\n",
        "Avoids hardcoding URLs\n",
        "\n",
        "Makes code cleaner and dynamic\n",
        "\n",
        "Automatically updates URLs if route changes\n",
        "\n",
        "Q17.How does Flask handle static files (CSS, JavaScript, etc.)?\n",
        "\n",
        "Ans Flask handles static files (like CSS, JS, images) using a folder named static/.\n",
        "How it works:\n",
        "Place files in the static/ directory\n",
        "Access them via /static/filename\n",
        "\n",
        "Q18.What is an API specification, and how does it help in building a Flask API?\n",
        "\n",
        "Ans API Specification: A document that defines how an API works — what endpoints exist, how to use them, and what they return.\n",
        "Includes:\n",
        "Endpoints & routes (e.g., /users)\n",
        "Methods (GET, POST, etc.)\n",
        "Request parameters & formats\n",
        "Response structure & status codes\n",
        "Authentication details\n",
        "How it helps in Flask API:\n",
        "Acts as a blueprint for development\n",
        "Ensures consistency and clarity\n",
        "Helps frontend & backend teams collaborate\n",
        "Aids in testing and documentation (e.g., with Swagger)\n",
        "\n",
        "Q19.What are HTTP status codes, and why are they important in a Flask API?\n",
        "\n",
        "Ans HTTP Status Codes Numbers returned by the server to indicate the result of a request.\n",
        "Why they’re important in Flask APIs:\n",
        "Tell the client if the request succeeded or failed\n",
        "Improve debugging and error handling\n",
        "Ensure clear communication between client & server\n",
        "\n",
        "Q20.How do you handle POST requests in Flask?\n",
        "\n",
        "Ans To handle POST requests in Flask: Allow POST in route\n",
        "Access posted data\n",
        "Form data: request.form['key']\n",
        "JSON data: request.get_json()\n",
        "\n",
        "Q21.How would you secure a Flask API?\n",
        "\n",
        "Ans Ways to secure a Flask API:\n",
        "Authentication: Use tokens (e.g., JWT) and API keys or OAuth\n",
        "Authorization: Restrict access based on user roles\n",
        "Input validation: Validate data to prevent injections (e.g., with Marshmallow or WTForms)\n",
        "Use HTTPS: Encrypt data in transit\n",
        "Rate limiting: Prevent abuse (e.g., via Flask-Limiter)\n",
        "CORS control: Use Flask-CORS to manage allowed domains\n",
        "Error handling: Don’t expose internal details in respons\n",
        "\n",
        "Q22.What is the significance of the Flask-RESTful extension?\n",
        "\n",
        "Ans Flask-RESTful: An extension that makes building REST APIs with Flask easier and cleaner.\n",
        "Significance:\n",
        "Adds Resource classes to organize endpoints\n",
        "Simplifies request parsing, validation\n",
        "Helps manage HTTP methods (GET, POST, etc.)\n",
        "Better structure for large APIs\n",
        "\n",
        "Q23.What is the role of Flask’s session object?\n",
        "\n",
        "Ans Flask’s session object: Used to store user-specific data (like login info) across requests.\n",
        "Role:\n",
        "Maintains state in a stateless HTTP environment\n",
        "Stores data in a secure, signed cookie\n",
        "Useful for things like:\n",
        "User login sessions\n",
        "Temporary preferences or settings\n",
        "\n",
        "        Practical question"
      ],
      "metadata": {
        "id": "jtwqBGUOLazb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Q1.How do you create a basic Flask application?\n",
        "pip install flask\n",
        "from flask import Flask\n",
        "\n",
        "app = Flask(__name__)\n",
        "\n",
        "@app.route('/')\n",
        "def home():\n",
        "    return 'Hello from Flask!'\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run(debug=True)"
      ],
      "metadata": {
        "id": "gq9j2gUipEcl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Q2.How do you serve static files like images or CSS in Flask?\n",
        "from flask import Flask, render_template\n",
        "\n",
        "app = Flask(__name__)\n",
        "\n",
        "@app.route('/')\n",
        "def home():\n",
        "    return render_template('index.html')\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run(debug=True)\n",
        "\n",
        "#templates/index.html\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "    Welcome to Flask!\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#static/style.css\n",
        "body {\n",
        "    background-color: #f0f0f0;\n",
        "    text-align: center;\n",
        "    font-family: Arial;\n",
        "}"
      ],
      "metadata": {
        "id": "K3ML2yPopUwb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Q3.How do you define different routes with different HTTP methods in Flask?\n",
        "from flask import Flask, request, jsonify\n",
        "\n",
        "app = Flask(__name__)\n",
        "\n",
        "# GET method\n",
        "@app.route('/hello', methods=['GET'])\n",
        "def hello():\n",
        "    return 'Hello, GET method!'\n",
        "\n",
        "# POST method\n",
        "@app.route('/submit', methods=['POST'])\n",
        "def submit():\n",
        "    data = request.get_json()\n",
        "    return jsonify({'received': data})\n",
        "\n",
        "# Multiple methods on same route\n",
        "@app.route('/user', methods=['GET', 'POST'])\n",
        "def user():\n",
        "    if request.method == 'POST':\n",
        "        return 'User Created'\n",
        "    else:\n",
        "        return 'User Info'\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run(debug=True)"
      ],
      "metadata": {
        "id": "V5h1v_P2p58N"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Q4.How do you render HTML templates in Flask?\n",
        "from flask import Flask, render_template\n",
        "\n",
        "app = Flask(__name__)\n",
        "\n",
        "@app.route('/')\n",
        "def home():\n",
        "    return render_template('home.html')\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run(debug=True)\n",
        "\n",
        "#templates/home.html\n",
        "\n",
        "\n",
        "\n",
        "    Flask Template\n",
        "\n",
        "\n",
        "    Welcome to Flask Template Rendering!"
      ],
      "metadata": {
        "id": "tDG7-XGZqWzQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Q5. How can you generate URLs for?\n",
        "from flask import Flask, url_for, render_template\n",
        "\n",
        "app = Flask(__name__)\n",
        "\n",
        "@app.route('/')\n",
        "def home():\n",
        "    return render_template('home.html')\n",
        "\n",
        "@app.route('/profile/')\n",
        "def profile(username):\n",
        "    return f'Profile page of {username}'\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run(debug=True)\n",
        "\n",
        "#templates/home.html\n",
        "\n",
        "\n",
        "\n",
        "    Home\n",
        "\n",
        "\n",
        "    Welcome!\n",
        "    Go to gourav Profile\n",
        "\n",
        "\n",
        "\n",
        "#Generates: /profile/gourav instead of hardcoding"
      ],
      "metadata": {
        "id": "bCHj0tnDrCBg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Q6.How do you handle forms in Flask?\n",
        "from flask import Flask, render_template, request\n",
        "\n",
        "app = Flask(__name__)\n",
        "\n",
        "@app.route('/form', methods=['GET', 'POST'])\n",
        "def form():\n",
        "    if request.method == 'POST':\n",
        "        name = request.form['name']\n",
        "        return render_template('result.html', name=name)\n",
        "    return render_template('form.html')\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run(debug=True)\n",
        "\n",
        "#templates/form.html\n",
        "\n",
        "\n",
        "Form\n",
        "\n",
        "    Enter your name:\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#templates/result.html\n",
        "\n",
        "\n",
        "Result\n",
        "\n",
        "    Hello, {{ name }}!"
      ],
      "metadata": {
        "id": "JVnhTYpUtZqS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Q7.How can you validate form data in Flask?\n",
        "from flask import Flask, session, redirect, url_for, request, render_template\n",
        "\n",
        "app = Flask(__name__)\n",
        "app.secret_key = 'your_secret_key'  # Needed for session encryption\n",
        "\n",
        "@app.route('/')\n",
        "def home():\n",
        "    if 'username' in session:\n",
        "        return redirect(url_for('dashboard'))\n",
        "    return redirect(url_for('login'))\n",
        "\n",
        "@app.route('/login', methods=['GET', 'POST'])\n",
        "def login():\n",
        "    if request.method == 'POST':\n",
        "        session['username'] = request.form['username']\n",
        "        return redirect(url_for('dashboard'))\n",
        "    return render_template('login.html')\n",
        "\n",
        "@app.route('/dashboard')\n",
        "def dashboard():\n",
        "    if 'username' in session:\n",
        "        return render_template('dashboard.html', name=session['username'])\n",
        "    return redirect(url_for('login'))\n",
        "\n",
        "@app.route('/logout')\n",
        "def logout():\n",
        "    session.pop('username', None)\n",
        "    return redirect(url_for('login'))\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run(debug=True)\n",
        "\n",
        "#templates/login.html\n",
        "\n",
        "\n",
        "Login\n",
        "\n",
        "    Login\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#templates/disboard.html\n",
        "\n",
        "\n",
        "Dashboard\n",
        "\n",
        "    Welcome, {{ name }}!\n",
        "    Logout"
      ],
      "metadata": {
        "id": "vcAmDwqoufN6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Q8.How do you manage sessions in Flask?\n",
        "from flask import Flask, session, redirect, url_for, request\n",
        "\n",
        "app = Flask(__name__)\n",
        "app.secret_key = 'replace_with_random_secret'\n",
        "\n",
        "@app.route('/', methods=['GET', 'POST'])\n",
        "def login():\n",
        "    if request.method == 'POST':\n",
        "        session['username'] = request.form['username']\n",
        "        return redirect(url_for('dashboard'))\n",
        "    return '''\n",
        "\n",
        "\n",
        "\n",
        "        '''\n",
        "\n",
        "@app.route('/dashboard')\n",
        "def dashboard():\n",
        "    if 'username' in session:\n",
        "        return f\"Hello, {session['username']}! Logout\"\n",
        "    return redirect(url_for('login'))\n",
        "\n",
        "@app.route('/logout')\n",
        "def logout():\n",
        "    session.pop('username', None)\n",
        "    return redirect(url_for('login'))\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run(debug=True)\n",
        "\n",
        "#Save as app.py, run with python app.py"
      ],
      "metadata": {
        "id": "jVylqa6iu5jm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Q9.How do you redirect to a different route in Flask?\n",
        "from flask import Flask, redirect, url_for\n",
        "\n",
        "app = Flask(__name__)\n",
        "\n",
        "@app.route('/')\n",
        "def home():\n",
        "    return redirect(url_for('dashboard'))\n",
        "\n",
        "@app.route('/dashboard')\n",
        "def dashboard():\n",
        "    return 'Welcome to Dashboard!'\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run(debug=True)"
      ],
      "metadata": {
        "id": "psXOQ6iJvMDC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Q10.How do you handle errors in Flask (e.g., 404)?\n",
        "# Use @app.errorhandler decorator\n",
        "from flask import Flask, render_template\n",
        "\n",
        "app = Flask(__name__)\n",
        "\n",
        "@app.route('/')\n",
        "def home():\n",
        "    return 'Home Page'\n",
        "\n",
        "# Handle 404 error\n",
        "@app.errorhandler(404)\n",
        "def page_not_found(e):\n",
        "    return render_template('404.html'), 404\n",
        "\n",
        "# Handle 500 error\n",
        "@app.errorhandler(500)\n",
        "def server_error(e):\n",
        "    return render_template('500.html'), 500\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run(debug=True)\n",
        "\n",
        "#Create error templates in /templates folder\n",
        "#templates/404.html\n",
        "404 - Page Not Found\n",
        "Oops! The page you're looking for doesn't exist.\n",
        "\n",
        "#templates/500.html\n",
        "500 - Server Error\n",
        "Something went wrong on our end."
      ],
      "metadata": {
        "id": "-as8iLpAvZt9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Q11.How do you structure a Flask app using Blueprints?\n",
        "#main/routes.py\n",
        "from flask import Blueprint\n",
        "\n",
        "main = Blueprint('main', __name__)\n",
        "\n",
        "@main.route('/')\n",
        "def home():\n",
        "    return 'Home from Blueprint!'\n",
        "\n",
        "#main/__init__.py ----> to mark the folder as a package — can be empty or contain init logic\n",
        "\n",
        "#app.py\n",
        "from flask import Flask\n",
        "from main.routes import main\n",
        "\n",
        "app = Flask(__name__)\n",
        "app.register_blueprint(main)\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run(debug=True)"
      ],
      "metadata": {
        "id": "d0Loh8Mfv_Tn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Q12.How do you define a custom Jinja filter in Flask?\n",
        "# 12] How do you define a custom Jinja filter in Flask\n",
        "# app.py\n",
        "from flask import Flask, render_template\n",
        "\n",
        "app = Flask(__name__)\n",
        "\n",
        "# Define custom filter\n",
        "def reverse_string(s):\n",
        "    return s[::-1]\n",
        "\n",
        "# Register the filter with Jinja\n",
        "app.jinja_env.filters['reverse'] = reverse_string\n",
        "\n",
        "@app.route('/')\n",
        "def home():\n",
        "    return render_template('index.html', name=\"Abhishek\")\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run(debug=True)\n",
        "\n",
        "#templates/index.html\n",
        "\n",
        "\n",
        "Custom Filter\n",
        "\n",
        "    Original: {{ name }}\n",
        "    Reversed: {{ name | reverse }}\n",
        "\n",
        "\n",
        "\n",
        "# output: Original: Abhishek\n",
        "#         Reversed: kehsihbA"
      ],
      "metadata": {
        "id": "nuyBlP5IwSin"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Q13.How can you redirect with query parameters in Flask?\n",
        "from flask import Flask, redirect, url_for, request\n",
        "\n",
        "app = Flask(__name__)\n",
        "\n",
        "@app.route('/')\n",
        "def home():\n",
        "    # Redirect to /search with query parameters\n",
        "    return redirect(url_for('search', q='flask', page=2))\n",
        "\n",
        "@app.route('/search')\n",
        "def search():\n",
        "    q = request.args.get('q')\n",
        "    page = request.args.get('page')\n",
        "    return f\"Search query: {q}, Page: {page}\"\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run(debug=True)\n",
        "\n",
        "# output: url_for('search', q='flask', page=2) → /search?q=flask&page=2"
      ],
      "metadata": {
        "id": "wkwmj82twmZK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Q14.How do you return JSON responses in Flask?\n",
        "# use jsonify\n",
        "from flask import Flask, jsonify\n",
        "\n",
        "app = Flask(__name__)\n",
        "\n",
        "@app.route('/api/data')\n",
        "def get_data():\n",
        "    data = {\n",
        "        'name': 'Abhishek',\n",
        "        'role': 'Developer',\n",
        "        'skills': ['Python', 'Flask', 'SQL']\n",
        "    }\n",
        "    return jsonify(data)\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run(debug=True)\n",
        "\n",
        "# '''Output at /api/data\n",
        "{\n",
        "  \"name\": \"Abhishek\",\n",
        "  \"role\": \"Developer\",\n",
        "  \"skills\": [\"Python\", \"Flask\", \"SQL\"]\n",
        "}'''"
      ],
      "metadata": {
        "id": "S_UEg9zrw_7J"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Q15.How do you capture URL parameters in Flask?\n",
        "# Use  in the route\n",
        "from flask import Flask\n",
        "\n",
        "app = Flask(__name__)\n",
        "\n",
        "@app.route('/user/')\n",
        "def show_user(username):\n",
        "    return f'Hello, {username}!'\n",
        "\n",
        "@app.route('/post/')\n",
        "def show_post(post_id):\n",
        "    return f'Post ID: {post_id}'\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run(debug=True)"
      ],
      "metadata": {
        "id": "80KRR6j8xTLi"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}